@startuml





/' Objects '/

class Beacon {
	-Input() : void
	-ProcessInput() : void
	-Start() : void
	-StartActor() : void
}


class CGameApp {
	+CGameApp()
	+~CGameApp()
	+Initialize() : MofBool
	+Release() : MofBool
	+Render() : MofBool
	+Update() : MofBool
	-game_ : base_engine::Game
}


class CollisionComponent {
}


abstract class IReceivablePower {
	+~IReceivablePower()
	+{abstract} PowerJoinCondition() : bool
	+{abstract} OnPowerChanged() : void
	+{abstract} OnPowerEnter() : void
	+{abstract} OnPowerExit() : void
}


abstract class ISendablePower {
	-{abstract} GetTarget() : std::vector<class IReceivablePower*>
	-{abstract} Sending() : void
}


class InputManager {
	+InputManager(base_engine::InputActor* owner)
	+~InputManager()
	+MousePosition() : Mof::Vector2 {query}
	-mouse_position_ : Mof::Vector2
	+ActionFire() : bool {query}
	+CollectBeaconFire() : bool {query}
	+JumpFire() : bool {query}
	+PauseFire() : bool {query}
	+PlaceBeaconFire() : bool {query}
	+SneakFire() : bool {query}
	-action_fire_ : bool
	-collect_beacon_fire_ : bool
	-jump_fire_ : bool
	-pause_fire_ : bool
	-place_beacon_fire_ : bool
	-sneak_fire_ : bool
	+MoveHorizontal() : float {query}
	-move_horizontal_ : float
	+ProcessInput() : void
	+Update() : void
}


class MainApp {
	+{static} GetKeyPush() : bool
	+{static} GetMousePush() : bool
	-isRender : bool
	-n : int&
	-vectors_ : std::vector<Vector2>
	-outers : std::vector<int>
	+AutoConvexHull() : void
	+Initialize() : void
	+Render() : void
	+Update() : void
}


class PlayerActor {
	+PlayerActor(base_engine::Game* game)
	+~PlayerActor()
	-move_vector_ : Mof::Vector2
	-input_manager_ : class InputManager*
	+Input() : void
	+SetInput(class InputManager* input_manager) : void
	+Start() : void
	+Update() : void
}


class Sprite {
	-sprite_ : Mof::CSprite3D
}


class TextureFactory {
	-map : std::vector<Mof::CTexture*>
}


namespace base_engine {
	class Actor {
		+Actor(class Game* game)
		+~Actor()
		+SetName(const std::string_view name) : Actor&
		#state_ : State
		#position_ : Vector2
		+GetPosition() : Vector2& {query}
		+GetGame() : class Game* {query}
		-game : class Game*
		+GetRotation() : float {query}
		+GetScale() : float {query}
		#rotation_ : float
		#scale_ : float
		+GetState() : int {query}
		#name_ : std::string
		+GetName() : std::string_view
		-components_ : std::vector<class Component*>
		-pending_components_ : std::vector<class Component*>
		-AddComponent() : void
		+AddComponent(class Component*) : void
		+Input() : void
		+ProcessInput() : void
		+RemoveComponent(class Component*) : void
		+SetPosition(const Vector2& pos) : void
		+SetRotation(const float rotation) : void
		+SetScale(const float scale) : void
		+SetState(State state) : void
		+Start() : void
		+StartActor() : void
		+Update() : void
		+UpdateActor() : void
	}

	class AssetHandleManager <template<class IDType, class Data>> {
		+AssetHandleManager(string name)
		+operator[](const IDType id) : Data*
		-m_data : HashTable
		+add(std::unique_ptr<Data>&& data, string info) : IDType
		-m_idFilled : bool
		+begin() : const_iterator {query}
		+end() : const_iterator {query}
		+begin() : iterator
		+end() : iterator
		+size() : size_t {query}
		-m_mutex : std::mutex
		-m_assetTypeName : string
		-m_idCount : typename IDType::value_type
		+destroy() : void
		+erase(const IDType id) : void
		+setNullData(std::unique_ptr<Data>&& data) : void
	}

	class BaseEngineComponent <template<class Interface>> {
		+~BaseEngineComponent()
		+get() : Interface*
		-interface_ : Interface*
		+release() : void
	}

	class BaseEngineCore {
		+BaseEngineCore()
		+~BaseEngineCore()
		+{static} Get() : auto*
		+{static} IsActive() : bool
		-{static} engine_ : inline static BaseEngineCore*
		-components_ : std::tuple<BaseEngineComponent<IBaseEngineEmpty>, BaseEngineComponent<IBaseEngineTexture>>
	}

	class BaseEngineEmpty {
	}

	class Component {
		+Component(class Actor* owner, int update_order)
		+~Component()
		#owner_ : class Actor*
		+GetUpdateOrder() : int {query}
		#update_order_ : int
		+ProcessInput() : void
		+Start() : void
		+Update() : void
	}

	class Game {
		-engine_ : BaseEngineCore
		+Initialize() : bool
		-updating_actors_ : bool
		-actors_ : std::vector<class Actor*>
		-pending_actors_ : std::vector<class Actor*>
		-sprites_ : std::vector<class RenderComponent*>
		+AddActor(class Actor* actor) : void
		+AddSprite(class RenderComponent* render_component) : void
		-ProcessInput() : void
		+RemoveActor(class Actor* actor) : void
		+RemoveSprite(class RenderComponent* render_component) : void
		+Render() : void {query}
		+Shutdown() : void
		+Update() : void
		-UpdateGame() : void
	}

	class IBaseEngineEmpty {
		+~IBaseEngineEmpty()
		+{static} Create() : IBaseEngineEmpty*
	}

	class IBaseEngineRender {
		+~IBaseEngineRender()
		+{static} Create() : IBaseEngineRender*
	}

	abstract class IBaseEngineTexture {
		+~IBaseEngineTexture()
		+{static} Create() : IBaseEngineTexture*
		+{abstract} Get(const std::string& name) : Mof::LPTexture
		+{abstract} Load(const std::string& name) : bool
		+{abstract} Release(const std::string& name) : bool
		+{abstract} Clear() : void
	}

	abstract class IShape {
		+~IShape()
		+{abstract} Draw(const class ShapeRenderComponent& drawable) : void
	}

	class InputActor {
		+InputActor(class Game* game)
		+~InputActor()
		+Input() : void
		+Update() : void
	}

	class InputComponent {
		+InputComponent(class InputActor* owner)
		+~InputComponent()
		+ProcessInput() : void
		+Update() : void
	}

	class Rect {
		+Rect(const CRectangle& pObj)
		+Rect(float left, float top, float right, float bottom)
		+Draw(const ShapeRenderComponent& drawable) : void
	}

	abstract class RenderComponent {
		+RenderComponent(class Actor* owner, int draw_order)
		+~RenderComponent()
		+GetDrawOrder() : int {query}
		-draw_order_ : int
		+{abstract} Draw() : void
		+Update() : void
	}

	class RenderMof {
		+RenderMof()
	}

	class ShapeRenderComponent {
		+ShapeRenderComponent(Actor* owner, int draw_order)
		-color_ : MofU32
		+SetColor(MofU32 color) : ShapeRenderComponent&
		+SetFillMode(YesNo<struct Fill_mode> mode) : ShapeRenderComponent&
		-fill_mode_ : YesNo<struct Fill_mode>
		-shape_ : std::unique_ptr<class IShape>
		+CreateRect(float left, float top, float right, float bottom) : void
		+CreateRect(const Mof::CRectangle& rect) : void
		+Draw() : void
		+Draw(const class Rect& rect) : void {query}
	}

	class SpriteComponent {
		+SpriteComponent(class Actor* owner, int draw_order)
		+~SpriteComponent()
		-sprite_ : Mof::CSprite3D
		-texture_ : Mof::LPTexture
		-color_ : MofU32
		-mFlashTime : float
		-draw_order_ : int
		+Draw() : void
		+SetColor(MofU32 color) : void
		+SetImage(Mof::LPTexture img) : void
		+StartFlash(float time, MofU32 color) : void
		+Update() : void
	}

	class TextureMof {
		+TextureMof()
		+~TextureMof()
		+Get(const std::string& name) : Mof::LPTexture
		+Load(const std::string& name) : bool
		+Release(const std::string& name) : bool
		-count : size_t
		-m_textures : std::unordered_map<std::string, Mof::LPTexture>
		+Clear() : void
	}

	enum Actor::State {
		kActive
		kDead
		kPause
		kStart
	}

	class TextureHandle {
		+handle : size_t
	}

	class YesNo <template<class Tag>> {
		+YesNo()
		+YesNo(bool yesNo)
		+YesNo(Helper helper)
		+operatorbool() {query}
		+operator<=>(const YesNo &) : auto {query}
		+getBool() : bool {query}
		-yes_no : bool
	}

	class YesNo::Helper {
		+yes_no : bool
	}
}





/' Inheritance relationships '/

base_engine.Actor <|-- base_engine.InputActor


base_engine.Actor <|-- .PlayerActor


base_engine.Component <|-- base_engine.InputComponent


base_engine.Component <|-- base_engine.RenderComponent


base_engine.IBaseEngineEmpty <|-- base_engine.BaseEngineEmpty


base_engine.IBaseEngineRender <|-- base_engine.RenderMof


base_engine.IBaseEngineTexture <|-- base_engine.TextureMof


.IReceivablePower <|-- .Beacon


.ISendablePower <|-- .Beacon


base_engine.IShape <|-- base_engine.Rect


base_engine.InputComponent <|-- .InputManager


base_engine.RenderComponent <|-- base_engine.ShapeRenderComponent


base_engine.RenderComponent <|-- base_engine.SpriteComponent





/' Aggregation relationships '/

base_engine.Actor "2" o-- base_engine.Component


base_engine.Actor o-- base_engine.Game


base_engine.BaseEngineCore *-- base_engine.BaseEngineComponent


base_engine.BaseEngineCore o-- base_engine.BaseEngineCore


base_engine.BaseEngineCore *-- base_engine.IBaseEngineEmpty


base_engine.BaseEngineCore *-- base_engine.IBaseEngineTexture


.CGameApp *-- base_engine.Game


base_engine.Component o-- base_engine.Actor


base_engine.Game "2" o-- base_engine.Actor


base_engine.Game *-- base_engine.BaseEngineCore


base_engine.Game o-- base_engine.RenderComponent


.PlayerActor o-- .InputManager


base_engine.ShapeRenderComponent *-- base_engine.IShape


base_engine.ShapeRenderComponent *-- base_engine.YesNo






/' Nested objects '/

base_engine.Actor +-- base_engine.Actor::State


base_engine.YesNo +-- base_engine.YesNo::Helper




@enduml
