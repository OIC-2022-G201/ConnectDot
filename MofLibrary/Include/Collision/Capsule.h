/*************************************************************************//*!
					
					@file	Capsule.h
					@brief	カプセル演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__CAPSULE__H__

#define		__CAPSULE__H__

//INCLUDE
#include	"Sphere.h"

namespace Mof {

	/*******************************//*!
	@brief	3Dカプセル構造体

			3Dカプセルを扱うための構造体。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API Capsule {
		Vector3				Position;					//!<位置
		Vector3				Angle;						//!<角度
		MofFloat			r;							//!<半径
		MofFloat			h;							//!<高さ
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		Capsule();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cz			Ｚ座標
				@param[in]		cr			半径
				@param[in]		ch			高さ

				@return			None
		*//**************************************************************************/
		Capsule(MofFloat cx,MofFloat cy,MofFloat cz,MofFloat cr,MofFloat ch);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		ang			向き
				@param[in]		r			半径
				@param[in]		ch			高さ

				@return			None
		*//**************************************************************************/
		Capsule(const Vector3& pos, const Vector3& ang, MofFloat cr, MofFloat ch);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		Capsule(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーカプセル

				@return			None
		*//**************************************************************************/
		Capsule(const Capsule& pObj);
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			floatキャスト<br>
								内部の座標をfloatポインタとしてそのまま返す。
		*//**************************************************************************/
		operator LPMofFloat ();
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Capsule& operator += ( const Vector3& v );
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Capsule& operator += ( const Capsule& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Capsule& operator -= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Capsule& operator -= ( const Capsule& v );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		Capsule& operator *= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector3との*=演算
		*//**************************************************************************/
		Capsule& operator *= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			Capsuleとの*=演算
		*//**************************************************************************/
		Capsule& operator *= ( const Capsule& v );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		Capsule& operator /= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector3との/=演算
		*//**************************************************************************/
		Capsule& operator /= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			Capsuleとの/=演算
		*//**************************************************************************/
		Capsule& operator /= ( const Capsule& v );
		/*************************************************************************//*!
				@brief			Vector3との+演算
		*//**************************************************************************/
		Capsule operator + ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Capsuleとの+演算
		*//**************************************************************************/
		Capsule operator + ( const Capsule& v ) const;
		/*************************************************************************//*!
				@brief			Vector3との+演算
		*//**************************************************************************/
		Capsule operator - ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Capsuleとの-演算
		*//**************************************************************************/
		Capsule operator - ( const Capsule& v ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		Capsule operator * ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector3との*演算
		*//**************************************************************************/
		Capsule operator * ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Capsuleとの*演算
		*//**************************************************************************/
		Capsule operator * ( const Capsule& v ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		Capsule operator / ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector3との/演算
		*//**************************************************************************/
		Capsule operator / ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Capsuleとの/演算
		*//**************************************************************************/
		Capsule operator / ( const Capsule& v ) const;
		/*************************************************************************//*!
				@brief			配列指定によるCapsuleメンバへのアクセス
		*//**************************************************************************/
		MofFloat& operator [] ( int i );
		/*************************************************************************//*!
				@brief			配列指定によるCapsuleメンバへのアクセス
		*//**************************************************************************/
		const MofFloat& operator [] ( int i ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const Capsule& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const Capsule& v ) const;
		
	}Capsule;
	
	/*******************************//*!
	@brief	3Dカプセル演算クラス

			Capsule構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCapsuleUtilities {
	public:
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がカプセルの中に入っているかを判定する
				@param[in]		r			判定カプセル
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置
				@param[in]		pz			判定Z位置

				@return			TRUE		カプセルの中に点がある
								FALSE		カプセルの範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Capsule& r,const MofFloat px,const MofFloat py,const MofFloat pz);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がカプセルの中に入っているかを判定する
				@param[in]		r			判定カプセル
				@param[in]		p			判定位置

				@return			TRUE		カプセルの中に点がある
								FALSE		カプセルの範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Capsule& r,const Vector3& p);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したCapsule（カプセル）とSphere（球）が接触しているかを判定する
				@param[in]		r			判定カプセル
				@param[in]		s			判定球
				
				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionSphere(const Capsule& r,const Sphere& s);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのCapsule（カプセル）が接触しているかを判定する
				@param[in]		r1			判定カプセル
				@param[in]		r2			判定カプセル
				
				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionCapsule(const Capsule& r1,const Capsule& r2);

	private:
		//作成を禁止する
		CCapsuleUtilities(){};
		CCapsuleUtilities(const CCapsuleUtilities& pObj){};
	};


	/*******************************//*!
	@brief	3Dカプセルクラス

			3Dカプセルを扱うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCapsule : public Capsule , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CCapsule();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cz			Ｚ座標
				@param[in]		cr			半径
				@param[in]		ch			高さ

				@return			None
		*//**************************************************************************/
		CCapsule(MofFloat cx, MofFloat cy, MofFloat cz, MofFloat cr, MofFloat ch);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		ang			向き
				@param[in]		cr			半径
				@param[in]		ch			高さ

				@return			None
		*//**************************************************************************/
		CCapsule(const Vector3& pos, const Vector3& ang, MofFloat cr, MofFloat ch);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CCapsule(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーカプセル

				@return			None
		*//**************************************************************************/
		CCapsule(const Capsule& pObj);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーカプセル

				@return			None
		*//**************************************************************************/
		CCapsule(const CCapsule& pObj);
		
		/*************************************************************************//*!
				@brief			移動<br>
								m移動する。
				@param[in]		m			移動量
				
				@return			None
		*//**************************************************************************/
		void Translation(const Vector3& m);
		/*************************************************************************//*!
				@brief			移動<br>
								posの位置に移動する。
				@param[in]		pos			位置
				
				@return			None
		*//**************************************************************************/
		void SetPosition(const Vector3& pos);

		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がカプセルの中に入っているかを判定する
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置
				@param[in]		pz			判定Z位置

				@return			TRUE		カプセルの中に点がある
								FALSE		カプセルの範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const MofFloat px,const MofFloat py,const MofFloat pz) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がカプセルの中に入っているかを判定する
				@param[in]		p			判定位置

				@return			TRUE		カプセルの中に点がある
								FALSE		カプセルの範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const Vector3& p) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したSphere（球）が接触しているかを判定する
				@param[in]		c			判定球

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionSphere(const Sphere& c) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したCapsule（カプセル）が接触しているかを判定する
				@param[in]		c			判定カプセル

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionCapsule(const Capsule& c) const;
		
		/*************************************************************************//*!
				@brief			数値の設定
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cz			Ｚ座標
				@param[in]		ax			Ｘ角度
				@param[in]		ay			Ｙ角度
				@param[in]		az			Ｚ角度
				@param[in]		cr			半径
				@param[in]		ch			高さ

				@return			None
		*//**************************************************************************/
		void SetValue(MofFloat cx, MofFloat cy, MofFloat cz, MofFloat ax, MofFloat ay, MofFloat az, MofFloat cr, MofFloat ch);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CCapsule& operator = ( const Capsule& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CCapsule, MOF_CAPSULECLASS_ID);
	};

	//ポインタ置き換え
	typedef CCapsule*			LPCapsule;

	//INLINE INCLUDE
	#include	"Capsule.inl"

}

#endif

//[EOF]