/*************************************************************************//*!
					
					@file	Rectangle.h
					@brief	矩形演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__RECTANGLE__H__

#define		__RECTANGLE__H__

//INCLUDE
#include	"../Math/Vector2.h"

namespace Mof {

	/*******************************//*!
	@brief	2D矩形構造体

			2D矩形を扱うための構造体。<br>
			矩形の左、右、上、下の4つの情報で表す。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API Rectangle {
		MofFloat			Left;						//!<左
		MofFloat			Top;						//!<上
		MofFloat			Right;						//!<右
		MofFloat			Bottom;						//!<下
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		Rectangle();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		l			左
				@param[in]		t			上
				@param[in]		r			右
				@param[in]		b			下

				@return			None
		*//**************************************************************************/
		Rectangle(MofFloat l,MofFloat t,MofFloat r,MofFloat b);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		lt			左上
				@param[in]		rb			右下

				@return			None
		*//**************************************************************************/
		Rectangle(const Vector2& lt,const Vector2& rb);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		Rectangle(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー矩形

				@return			None
		*//**************************************************************************/
		Rectangle(const Rectangle& pObj);
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			floatキャスト<br>
								内部の座標をfloatポインタとしてそのまま返す。
		*//**************************************************************************/
		operator LPMofFloat ();
		/*************************************************************************//*!
				@brief			+取得
		*//**************************************************************************/
		Rectangle operator + () const;
		/*************************************************************************//*!
				@brief			-取得
		*//**************************************************************************/
		Rectangle operator - () const;
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Rectangle& operator += ( const Vector2& v );
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Rectangle& operator += ( const Rectangle& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Rectangle& operator -= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Rectangle& operator -= ( const Rectangle& v );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		Rectangle& operator *= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector2との*=演算
		*//**************************************************************************/
		Rectangle& operator *= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			Rectangleとの*=演算
		*//**************************************************************************/
		Rectangle& operator *= ( const Rectangle& v );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		Rectangle& operator /= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector2との/=演算
		*//**************************************************************************/
		Rectangle& operator /= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			Rectangleとの/=演算
		*//**************************************************************************/
		Rectangle& operator /= ( const Rectangle& v );
		/*************************************************************************//*!
				@brief			Vector2との+演算
		*//**************************************************************************/
		Rectangle operator + ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Rectangleとの+演算
		*//**************************************************************************/
		Rectangle operator + ( const Rectangle& v ) const;
		/*************************************************************************//*!
				@brief			Vector2との-演算
		*//**************************************************************************/
		Rectangle operator - ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Rectangleとの-演算
		*//**************************************************************************/
		Rectangle operator - ( const Rectangle& v ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		Rectangle operator * ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector2との*演算
		*//**************************************************************************/
		Rectangle operator * ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Rectangleとの*演算
		*//**************************************************************************/
		Rectangle operator * ( const Rectangle& v ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		Rectangle operator / ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector2との/演算
		*//**************************************************************************/
		Rectangle operator / ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Rectangleとの/演算
		*//**************************************************************************/
		Rectangle operator / ( const Rectangle& v ) const;
		/*************************************************************************//*!
				@brief			配列指定によるRectangleメンバへのアクセス
		*//**************************************************************************/
		MofFloat& operator [] ( int i );
		/*************************************************************************//*!
				@brief			配列指定によるRectangleメンバへのアクセス
		*//**************************************************************************/
		const MofFloat& operator [] ( int i ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const Rectangle& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const Rectangle& v ) const;
		
	}Rectangle;
	
	/*******************************//*!
	@brief	2D矩形演算クラス

			Rectangle構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CRectangleUtilities {
	public:
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が矩形の中に入っているかを判定する
				@param[in]		r			判定矩形
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Rectangle& r,const MofFloat px,const MofFloat py);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が矩形の中に入っているかを判定する
				@param[in]		r			判定矩形
				@param[in]		p			判定位置

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Rectangle& r,const Vector2& p);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのRectangle（矩形）が接触しているかを判定する
				@param[in]		r1			判定矩形
				@param[in]		r2			判定矩形

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		static MofBool CollisionRect(const Rectangle& r1,const Rectangle& r2);

	private:
		//作成を禁止する
		CRectangleUtilities(){};
		CRectangleUtilities(const CRectangleUtilities& pObj){};
	};


	/*******************************//*!
	@brief	2D矩形クラス

			2D矩形を扱うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CRectangle : public Rectangle , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CRectangle();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		l			左
				@param[in]		t			上
				@param[in]		r			右
				@param[in]		b			下

				@return			None
		*//**************************************************************************/
		CRectangle(MofFloat l,MofFloat t,MofFloat r,MofFloat b);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		lt			左上
				@param[in]		rb			右下

				@return			None
		*//**************************************************************************/
		CRectangle(const Vector2& lt,const Vector2& rb);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CRectangle(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー矩形

				@return			None
		*//**************************************************************************/
		CRectangle(const Rectangle& pObj);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー矩形

				@return			None
		*//**************************************************************************/
		CRectangle(const CRectangle& pObj);

		/*************************************************************************//*!
				@brief			矩形拡張<br>
								Left,Topに-e、Right,Bottomに+eを行う
				@param[in]		e			拡張サイズ

				@return			None
		*//**************************************************************************/
		void Expansion(const MofFloat e);
		/*************************************************************************//*!
				@brief			矩形拡張<br>
								Left,Topに-ex、Right,Bottomに+eyを行う
				@param[in]		ex			X拡張サイズ
				@param[in]		ey			Y拡張サイズ

				@return			None
		*//**************************************************************************/
		void Expansion(const MofFloat ex,const MofFloat ey);
		
		/*************************************************************************//*!
				@brief			移動<br>
								矩形の幅と高さをそのままにm移動する。
				@param[in]		m			移動量
				
				@return			None
		*//**************************************************************************/
		void Translation(const Vector2& m);
		/*************************************************************************//*!
				@brief			移動<br>
								矩形の幅と高さをそのままにposの位置に移動する。
				@param[in]		pos			位置
				
				@return			None
		*//**************************************************************************/
		void SetPosition(const Vector2& pos);
		//名前変更
		//void Move(const Vector2& pos);
		/*************************************************************************//*!
				@brief			幅<br>
								矩形の幅を変更する。
				@param[in]		w			幅
				
				@return			None
		*//**************************************************************************/
		void SetWidth(const MofFloat w);
		/*************************************************************************//*!
				@brief			高さ<br>
								矩形の高さを変更する。
				@param[in]		h			高さ
				
				@return			None
		*//**************************************************************************/
		void SetHeight(const MofFloat h);
		
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が矩形の中に入っているかを判定する
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const MofFloat px,const MofFloat py) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が矩形の中に入っているかを判定する
				@param[in]		p			判定位置

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const Vector2& p) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したRectangle（矩形）が接触しているかを判定する
				@param[in]		l			判定左位置
				@param[in]		t			判定上位置
				@param[in]		r			判定右位置
				@param[in]		b			判定下位置

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		MofBool CollisionRect(const MofFloat l,const MofFloat t,const MofFloat r,const MofFloat b) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したRectangle（矩形）が接触しているかを判定する
				@param[in]		r			判定矩形

				@return			TRUE		矩形の中に点がある
								FALSE		矩形の範囲外
		*//**************************************************************************/
		MofBool CollisionRect(const Rectangle& r) const;
		
		/*************************************************************************//*!
				@brief			数値の設定
				@param[in]		l			左
				@param[in]		t			上
				@param[in]		r			右
				@param[in]		b			下

				@return			None
		*//**************************************************************************/
		void SetValue(MofFloat l,MofFloat t,MofFloat r,MofFloat b);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			幅取得
				@param			None

				@return			幅の取得
		*//**************************************************************************/
		MofFloat GetWidth(void) const;
		/*************************************************************************//*!
				@brief			高さ取得
				@param			None

				@return			高さの取得
		*//**************************************************************************/
		MofFloat GetHeight(void) const;
		/*************************************************************************//*!
				@brief			中心取得
				@param			None

				@return			中心取得
		*//**************************************************************************/
		Vector2 GetCenter(void) const;
		/*************************************************************************//*!
				@brief			左上取得
				@param			None

				@return			左上取得
		*//**************************************************************************/
		Vector2 GetTopLeft(void) const;
		/*************************************************************************//*!
				@brief			右上取得
				@param			None

				@return			右上取得
		*//**************************************************************************/
		Vector2 GetTopRight(void) const;
		/*************************************************************************//*!
				@brief			左下取得
				@param			None

				@return			左下取得
		*//**************************************************************************/
		Vector2 GetBottomLeft(void) const;
		/*************************************************************************//*!
				@brief			右下取得
				@param			None

				@return			右下取得
		*//**************************************************************************/
		Vector2 GetBottomRight(void) const;
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CRectangle& operator = ( const Rectangle& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CRectangle,MOF_RECTANGLECLASS_ID);
	};

	//ポインタ置き換え
	typedef CRectangle*			LPRectangle;

	//INLINE INCLUDE
	#include	"Rectangle.inl"

}

#endif

//[EOF]