/*************************************************************************//*!
					
					@file	Ray.inl
					@brief	レイ演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//--------------------------------------------------------------------------------------------
//Ray3D
//--------------------------------------------------------------------------------------------
/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE Ray3D::Ray3D() : 
Position() ,
Direction() {
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pos			座標
		@param[in]		dir			方向

		@return			None
*//**************************************************************************/
FORCE_INLINE Ray3D::Ray3D(const Vector3& pos,const Vector3& dir) : 
Position(pos) ,
Direction() {
	CVector3Utilities::Normal(dir,Direction);
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pv			座標

		@return			None
*//**************************************************************************/
FORCE_INLINE Ray3D::Ray3D(LPMofFloat pv) : 
Position(pv[0],pv[1],pv[2]) ,
Direction(pv[3],pv[4],pv[5]) {
	CVector3Utilities::Normal(Direction,Direction);
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーレイ

		@return			None
*//**************************************************************************/
FORCE_INLINE Ray3D::Ray3D(const Ray3D& pObj) : 
Position(pObj.Position) ,
Direction(pObj.Direction) {
}
/*************************************************************************//*!
		@brief			+=演算
*//**************************************************************************/
FORCE_INLINE Ray3D& Ray3D::operator += ( const Vector3& v ){
	Position += v;
	return *this;
}
/*************************************************************************//*!
		@brief			+=演算
*//**************************************************************************/
FORCE_INLINE Ray3D& Ray3D::operator += ( const Ray3D& v ){
	Position += v.Position;
	Direction += v.Direction;
	CVector3Utilities::Normal(Direction,Direction);
	return *this;
}
/*************************************************************************//*!
		@brief			-=演算
*//**************************************************************************/
FORCE_INLINE Ray3D& Ray3D::operator -= ( const Vector3& v ){
	Position -= v;
	return *this;
}
/*************************************************************************//*!
		@brief			-=演算
*//**************************************************************************/
FORCE_INLINE Ray3D& Ray3D::operator -= ( const Ray3D& v ){
	Position -= v.Position;
	Direction -= v.Direction;
	CVector3Utilities::Normal(Direction,Direction);
	return *this;
}
/*************************************************************************//*!
		@brief			Vector3との+演算
*//**************************************************************************/
FORCE_INLINE Ray3D Ray3D::operator + ( const Vector3& v ) const{
	return Ray3D(Position + v,Direction);
}
/*************************************************************************//*!
		@brief			Ray3Dとの+演算
*//**************************************************************************/
FORCE_INLINE Ray3D Ray3D::operator + ( const Ray3D& v ) const{
	return Ray3D(Position + v.Position,Direction + v.Direction);
}
/*************************************************************************//*!
		@brief			Vector3との-演算
*//**************************************************************************/
FORCE_INLINE Ray3D Ray3D::operator - ( const Vector3& v ) const{
	return Ray3D(Position - v,Direction);
}
/*************************************************************************//*!
		@brief			Ray3Dとの-演算
*//**************************************************************************/
FORCE_INLINE Ray3D Ray3D::operator - ( const Ray3D& v ) const{
	return Ray3D(Position - v.Position,Direction - v.Direction);
}
//--------------------------------------------------------------------------------------------
//CRay3DUtilities
//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
//CRay3D
//--------------------------------------------------------------------------------------------
/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE CRay3D::CRay3D() :
Ray3D() {
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pos			座標
		@param[in]		dir			方向

		@return			None
*//**************************************************************************/
FORCE_INLINE CRay3D::CRay3D(const Vector3& pos,const Vector3& dir) :
Ray3D(pos,dir) {
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pv			座標

		@return			None
*//**************************************************************************/
FORCE_INLINE CRay3D::CRay3D(LPMofFloat pv) :
Ray3D(pv) {
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーレイ

		@return			None
*//**************************************************************************/
FORCE_INLINE CRay3D::CRay3D(const Ray3D& pObj) :
Ray3D(pObj) {
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーレイ

		@return			None
*//**************************************************************************/
FORCE_INLINE CRay3D::CRay3D(const CRay3D& pObj) :
Ray3D(pObj) {
}
/*************************************************************************//*!
		@brief			移動<br>
						m移動する。
		@param[in]		m			移動量
				
		@return			None
*//**************************************************************************/
FORCE_INLINE void CRay3D::Translation(const Vector3& m) {
	Position += m;
	return;
}
/*************************************************************************//*!
		@brief			移動<br>
						posの位置に移動する。
		@param[in]		pos			位置
				
		@return			None
*//**************************************************************************/
FORCE_INLINE void CRay3D::SetPosition(const Vector3& pos){
	Position = pos;
	return;
}
/*************************************************************************//*!
		@brief			代入
*//**************************************************************************/
FORCE_INLINE CRay3D& CRay3D::operator = ( const Ray3D& v ){
	Position = v.Position;
	Direction = v.Direction;
	return *this;
}

//[EOF]