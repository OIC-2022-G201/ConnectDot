/*************************************************************************//*!
					
					@file	Box.h
					@brief	箱演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__BOX__H__

#define		__BOX__H__

//INCLUDE
#include	"CollisionCommon.h"

namespace Mof {
	
	/*******************************//*!
	@brief	3D箱（AABB）構造体

			3D箱（AABB）を扱うための構造体。<br>
			中心座標(Position)と中心からの大きさ(Size)で箱の情報を表す。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API BoxAABB {
		Vector3				Position;					//!<位置
		Vector3				Size;						//!<中心位置からのサイズ
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		BoxAABB();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		size		中心からのサイズ

				@return			None
		*//**************************************************************************/
		BoxAABB(const Vector3& pos,const Vector3& size);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		BoxAABB(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー箱

				@return			None
		*//**************************************************************************/
		BoxAABB(const BoxAABB& pObj);

		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		BoxAABB& operator += ( const Vector3& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		BoxAABB& operator -= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		BoxAABB& operator *= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector3との*=演算
		*//**************************************************************************/
		BoxAABB& operator *= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			BoxAABBとの*=演算
		*//**************************************************************************/
		BoxAABB& operator *= ( const BoxAABB& v );
		/*************************************************************************//*!
				@brief			BoxAABBとの*=演算
		*//**************************************************************************/
		BoxAABB& operator *= ( const Matrix44& v );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		BoxAABB& operator /= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector3との/=演算
		*//**************************************************************************/
		BoxAABB& operator /= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			BoxAABBとの/=演算
		*//**************************************************************************/
		BoxAABB& operator /= ( const BoxAABB& v );
		/*************************************************************************//*!
				@brief			Vector3との+演算
		*//**************************************************************************/
		BoxAABB operator + ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Vector3との+演算
		*//**************************************************************************/
		BoxAABB operator - ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		BoxAABB operator * ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector3との*演算
		*//**************************************************************************/
		BoxAABB operator * ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Matrix44との*演算
		*//**************************************************************************/
		BoxAABB operator * ( const Matrix44& v ) const;
		/*************************************************************************//*!
				@brief			BoxAABBとの*演算
		*//**************************************************************************/
		BoxAABB operator * ( const BoxAABB& v ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		BoxAABB operator / ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector3との/演算
		*//**************************************************************************/
		BoxAABB operator / ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			BoxAABBとの/演算
		*//**************************************************************************/
		BoxAABB operator / ( const BoxAABB& v ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const BoxAABB& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const BoxAABB& v ) const;
	}BoxAABB,AABB;
	
	/*******************************//*!
	@brief	3D箱（OBB）構造体

			3D箱（OBB）を扱うための構造体。<br>
			AABBの情報に加えて回転角度(Angle)を追加<br>
			Angleを更新した場合は必ずCOBBUtilities::CalculateAxisを実行し軸の再計算をおこなうこと。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API BoxOBB : public BoxAABB {
		Vector3				Angle;						//!<角度
		Vector3				Axis[3];					//!<軸
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		BoxOBB();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		size		中心からのサイズ
				@param[in]		ang			回転

				@return			None
		*//**************************************************************************/
		BoxOBB(const Vector3& pos,const Vector3& size,const Vector3& ang);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		BoxOBB(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー箱

				@return			None
		*//**************************************************************************/
		BoxOBB(const BoxOBB& pObj);
		

		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const BoxOBB& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const BoxOBB& v ) const;
	}BoxOBB,OBB,Box;
	
	/*******************************//*!
	@brief	3D箱（AABB）演算クラス

			AABB構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CAABBUtilities {
	public:
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がAABBの中に入っているかを判定する
				@param[in]		box			判定AABB
				@param[in]		pt			判定座標

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const BoxAABB& box,const Vector3& pt);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのAABBが接触しているかを判定する
				@param[in]		b1			判定AABB
				@param[in]		b2			判定AABB

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionAABB(const BoxAABB& b1,const BoxAABB& b2);

	private:
		//作成を禁止する
		CAABBUtilities(){};
		CAABBUtilities(const CAABBUtilities& pObj){};
	};
	
	/*******************************//*!
	@brief	3D箱（OBB）演算クラス

			OBB構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API COBBUtilities {
	public:
		/*************************************************************************//*!
				@brief			軸の算出<br>
								角度を更新した場合必ず実行すること
				@param[in]		box			算出する箱

				@return			None
		*//**************************************************************************/
		static void CalculateAxis(BoxOBB& box);
		/*************************************************************************//*!
				@brief			OBBを内包するAABBを求める
				@param[in]		box			算出するOBB
				@param[out]		ob			算出するAABB

				@return			None
		*//**************************************************************************/
		static void CalculateAABB(const BoxOBB& box,BoxAABB& ob);
		
		/*************************************************************************//*!
				@brief			指定座標との最近点の算出
				@param[in]		pt			算出する点
				@param[in]		box			算出する箱
				@param[out]		op			出力点

				@return			None
		*//**************************************************************************/
		static void ClosestPtPoint(const Vector3& pt,const BoxOBB& box,Vector3& op);
		
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がOBBの中に入っているかを判定する
				@param[in]		box			判定OBB
				@param[in]		pt			判定座標

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const BoxOBB& box,const Vector3& pt);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのOBBが接触しているかを判定する
				@param[in]		b1			判定OBB
				@param[in]		b2			判定OBB

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		static MofBool CollisionOBB(const BoxOBB& b1,const BoxOBB& b2);

	private:
		//作成を禁止する
		COBBUtilities(){};
		COBBUtilities(const COBBUtilities& pObj){};
	};
	
	/*******************************//*!
	@brief	3D箱（AABB）クラス

			AABBを扱うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CBoxAABB : public BoxAABB , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CBoxAABB();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		size		中心からのサイズ

				@return			None
		*//**************************************************************************/
		CBoxAABB(const Vector3& pos,const Vector3& size);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CBoxAABB(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー箱

				@return			None
		*//**************************************************************************/
		CBoxAABB(const CBoxAABB& pObj);
		
		/*************************************************************************//*!
				@brief			移動<br>
								m移動する。
				@param[in]		m			移動量
				
				@return			None
		*//**************************************************************************/
		void Translation(const Vector3& m);
		/*************************************************************************//*!
				@brief			移動<br>
								posの位置に移動する。
				@param[in]		pos			位置
				
				@return			None
		*//**************************************************************************/
		void SetPosition(const Vector3& pos);

		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がAABBの中に入っているかを判定する
				@param[in]		pt			判定座標

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const Vector3& pt) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのAABBが接触しているかを判定する
				@param[in]		b			判定AABB

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionAABB(const BoxAABB& b) const;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CBoxAABB& operator = ( const BoxAABB& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CBoxAABB,MOF_AABBCLASS_ID);
	};
	//置き換え
	typedef CBoxAABB			*LPBoxAABB,CAABB,*LPAABB;

	/*******************************//*!
	@brief	3D箱（OBB）クラス

			OBBを扱うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CBoxOBB : public BoxOBB , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CBoxOBB();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		size		中心からのサイズ
				@param[in]		ang			回転

				@return			None
		*//**************************************************************************/
		CBoxOBB(const Vector3& pos,const Vector3& size,const Vector3& ang);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CBoxOBB(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー箱

				@return			None
		*//**************************************************************************/
		CBoxOBB(const CBoxOBB& pObj);
		
		/*************************************************************************//*!
				@brief			軸の算出<br>
								角度を更新した場合必ず実行すること
				@param			None

				@return			None
		*//**************************************************************************/
		void CalculateAxis(void);
		/*************************************************************************//*!
				@brief			OBBを内包するAABBを求める
				@param[out]		ob			算出するAABB

				@return			None
		*//**************************************************************************/
		void CalculateAABB(BoxAABB& ob) const;
		
		/*************************************************************************//*!
				@brief			指定座標との最近点の算出
				@param[in]		pt			算出する点
				@param[out]		op			出力点

				@return			None
		*//**************************************************************************/
		void ClosestPtPoint(const Vector3& pt,Vector3& op) const;
		
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector3（ポイント）がOBBの中に入っているかを判定する
				@param[in]		pt			判定座標

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const Vector3& pt) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのOBBが接触しているかを判定する
				@param[in]		b			判定OBB

				@return			TRUE		接触
								FALSE		範囲外
		*//**************************************************************************/
		MofBool CollisionOBB(const BoxOBB& b) const;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CBoxOBB& operator = ( const BoxOBB& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CBoxOBB,MOF_OBBCLASS_ID);
	};
	//置き換え
	typedef CBoxOBB			*LPBoxOBB,COBB,*LPOBB;

	//INLINE INCLUDE
	#include	"Box.inl"

}

#endif

//[EOF]