/*************************************************************************//*!
					
					@file	Circle.h
					@brief	円演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__CIRCLE__H__

#define		__CIRCLE__H__

//INCLUDE
#include	"../Math/Vector2.h"

namespace Mof {

	/*******************************//*!
	@brief	2D円構造体

			2D円を扱うための構造体。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API Circle {
		union {
			struct {
				MofFloat		x;						//!<X位置
				MofFloat		y;						//!<Y位置
			};
			struct {
				Vector2Impl		Position;				//!<位置
			};
		};
		MofFloat			r;							//!<半径
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		Circle();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cr			半径

				@return			None
		*//**************************************************************************/
		Circle(MofFloat cx,MofFloat cy,MofFloat cr);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		cr			半径

				@return			None
		*//**************************************************************************/
		Circle(const Vector2& pos,MofFloat cr);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		Circle(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー円

				@return			None
		*//**************************************************************************/
		Circle(const Circle& pObj);
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			floatキャスト<br>
								内部の座標をfloatポインタとしてそのまま返す。
		*//**************************************************************************/
		operator LPMofFloat ();
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Circle& operator += ( const Vector2& v );
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Circle& operator += ( const Circle& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Circle& operator -= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Circle& operator -= ( const Circle& v );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		Circle& operator *= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector2との*=演算
		*//**************************************************************************/
		Circle& operator *= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			Circleとの*=演算
		*//**************************************************************************/
		Circle& operator *= ( const Circle& v );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		Circle& operator /= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Vector2との/=演算
		*//**************************************************************************/
		Circle& operator /= ( const Vector2& v );
		/*************************************************************************//*!
				@brief			Circleとの/=演算
		*//**************************************************************************/
		Circle& operator /= ( const Circle& v );
		/*************************************************************************//*!
				@brief			Vector2との+演算
		*//**************************************************************************/
		Circle operator + ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Circleとの+演算
		*//**************************************************************************/
		Circle operator + ( const Circle& v ) const;
		/*************************************************************************//*!
				@brief			Vector2との-演算
		*//**************************************************************************/
		Circle operator - ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Circleとの-演算
		*//**************************************************************************/
		Circle operator - ( const Circle& v ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		Circle operator * ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector2との*演算
		*//**************************************************************************/
		Circle operator * ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Circleとの*演算
		*//**************************************************************************/
		Circle operator * ( const Circle& v ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		Circle operator / ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Vector2との/演算
		*//**************************************************************************/
		Circle operator / ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Circleとの/演算
		*//**************************************************************************/
		Circle operator / ( const Circle& v ) const;
		/*************************************************************************//*!
				@brief			配列指定によるCircleメンバへのアクセス
		*//**************************************************************************/
		MofFloat& operator [] ( int i );
		/*************************************************************************//*!
				@brief			配列指定によるCircleメンバへのアクセス
		*//**************************************************************************/
		const MofFloat& operator [] ( int i ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const Circle& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const Circle& v ) const;
		
	}Circle;
	
	/*******************************//*!
	@brief	2D円演算クラス

			Circle構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCircleUtilities {
	public:
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が円の中に入っているかを判定する
				@param[in]		r			判定円
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Circle& r,const MofFloat px,const MofFloat py);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が円の中に入っているかを判定する
				@param[in]		r			判定円
				@param[in]		p			判定位置

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		static MofBool CollisionPoint(const Circle& r,const Vector2& p);
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定した二つのCircle（円）が接触しているかを判定する
				@param[in]		r1			判定円
				@param[in]		r2			判定円

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		static MofBool CollisionCircle(const Circle& r1,const Circle& r2);

	private:
		//作成を禁止する
		CCircleUtilities(){};
		CCircleUtilities(const CCircleUtilities& pObj){};
	};


	/*******************************//*!
	@brief	2D円クラス

			2D円を扱うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCircle : public Circle , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CCircle();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cr			半径

				@return			None
		*//**************************************************************************/
		CCircle(MofFloat cx,MofFloat cy,MofFloat cr);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pos			座標
				@param[in]		cr			半径

				@return			None
		*//**************************************************************************/
		CCircle(const Vector2& pos,MofFloat cr);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CCircle(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー円

				@return			None
		*//**************************************************************************/
		CCircle(const Circle& pObj);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー円

				@return			None
		*//**************************************************************************/
		CCircle(const CCircle& pObj);
		
		/*************************************************************************//*!
				@brief			移動<br>
								m移動する。
				@param[in]		m			移動量
				
				@return			None
		*//**************************************************************************/
		void Translation(const Vector2& m);
		/*************************************************************************//*!
				@brief			移動<br>
								posの位置に移動する。
				@param[in]		pos			位置
				
				@return			None
		*//**************************************************************************/
		void SetPosition(const Vector2& pos);

		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が円の中に入っているかを判定する
				@param[in]		px			判定X位置
				@param[in]		py			判定Y位置

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const MofFloat px,const MofFloat py) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したVector2（ポイント）が円の中に入っているかを判定する
				@param[in]		p			判定位置

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		MofBool CollisionPoint(const Vector2& p) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したCircle（円）が接触しているかを判定する
				@param[in]		cx			判定Ｘ位置
				@param[in]		cy			判定Ｙ位置
				@param[in]		cr			判定半径

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		MofBool CollisionCircle(const MofFloat cx,const MofFloat cy,const MofFloat cr) const;
		/*************************************************************************//*!
				@brief			あたり判定<br>
								指定したCircle（円）が接触しているかを判定する
				@param[in]		c			判定円

				@return			TRUE		円の中に点がある
								FALSE		円の範囲外
		*//**************************************************************************/
		MofBool CollisionCircle(const Circle& c) const;
		
		/*************************************************************************//*!
				@brief			数値の設定
				@param[in]		cx			Ｘ座標
				@param[in]		cy			Ｙ座標
				@param[in]		cr			半径

				@return			None
		*//**************************************************************************/
		void SetValue(MofFloat cx,MofFloat cy,MofFloat cr);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CCircle& operator = ( const Circle& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CCircle,MOF_CIRCLECLASS_ID);
	};

	//ポインタ置き換え
	typedef CCircle*			LPCircle;

	//INLINE INCLUDE
	#include	"Circle.inl"

}

#endif

//[EOF]