/*************************************************************************//*!
					
					@file	Vector2.inl
					@brief	2Dベクトル演算関連。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//--------------------------------------------------------------------------------------------
//Vector2
//--------------------------------------------------------------------------------------------
/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE Vector2::Vector2(){
	x = 0.0f;
	y = 0.0f;
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		vx			X
		@param[in]		vy			Y

		@return			None
*//**************************************************************************/
FORCE_INLINE Vector2::Vector2(MofFloat vx,MofFloat vy){
	x = vx;
	y = vy;
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pv			座標

		@return			None
*//**************************************************************************/
FORCE_INLINE Vector2::Vector2(LPMofFloat pv){
	x = pv[0];
	y = pv[1];
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーベクトル

		@return			None
*//**************************************************************************/
FORCE_INLINE Vector2::Vector2(const Vector2& pObj){
	x = pObj.x;
	y = pObj.y;
}
/*************************************************************************//*!
		@brief			floatキャスト<br>
						内部の座標をfloatポインタとしてそのまま返す。
*//**************************************************************************/
FORCE_INLINE Vector2::operator LPMofFloat (){
	return (LPMofFloat)&x;
}
/*************************************************************************//*!
		@brief			代入
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator = ( const Vector2Impl& v ){
	x = v.x;
	y = v.y;
	return *this;
}
/*************************************************************************//*!
		@brief			+取得
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator + () const{
	return Vector2(x,y);
}
/*************************************************************************//*!
		@brief			-取得
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator - () const{
	return Vector2(-x,-y);
}
/*************************************************************************//*!
		@brief			+=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator += ( const Vector2Impl& v ){
	x += v.x;
	y += v.y;
	return *this;
}
/*************************************************************************//*!
		@brief			-=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator -= ( const Vector2Impl& v ){
	x -= v.x;
	y -= v.y;
	return *this;
}
/*************************************************************************//*!
		@brief			floatとの*=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator *= ( const MofFloat v ){
	x *= v;
	y *= v;
	return *this;
}
/*************************************************************************//*!
		@brief			Vector2との*=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator *= ( const Vector2Impl& v ){
	x *= v.x;
	y *= v.y;
	return *this;
}
/*************************************************************************//*!
		@brief			floatとの/=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator /= ( const MofFloat v ){
	if(v == 0)
	{
		return *this;
	}
	MofFloat tmp = 1.0f  / v;
	x *= tmp;
	y *= tmp;
	return *this;
}
/*************************************************************************//*!
		@brief			Vector2との/=演算
*//**************************************************************************/
FORCE_INLINE Vector2& Vector2::operator /= ( const Vector2Impl& v ){
	x /= ((v.x == 0) ? 1.0f : v.x);
	y /= ((v.y == 0) ? 1.0f : v.y);
	return *this;
}
/*************************************************************************//*!
		@brief			+演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator + ( const Vector2Impl& v ) const{
	return Vector2(x + v.x,y + v.y);
}
/*************************************************************************//*!
		@brief			-演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator - ( const Vector2Impl& v ) const{
	return Vector2(x - v.x,y - v.y);
}
/*************************************************************************//*!
		@brief			floatとの*演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator * ( const MofFloat v ) const{
	return Vector2(x * v,y * v);
}
/*************************************************************************//*!
		@brief			Vector2との*演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator * ( const Vector2Impl& v ) const{
	return Vector2(x * v.x,y * v.y);
}
/*************************************************************************//*!
		@brief			floatとの/演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator / ( const MofFloat v ) const{
	if(v == 0)
	{
		return *this;
	}
	return Vector2(x / v,y / v);
}
/*************************************************************************//*!
		@brief			Vector2との/演算
*//**************************************************************************/
FORCE_INLINE Vector2 Vector2::operator / ( const Vector2Impl& v ) const{
	return Vector2(x / ((v.x == 0) ? 1.0f : v.x),y / ((v.y == 0) ? 1.0f : v.y));
}
/*************************************************************************//*!
		@brief			配列指定によるVector2メンバへのアクセス
*//**************************************************************************/
FORCE_INLINE MofFloat& Vector2::operator [] ( int i ){
	return fv[i];
}
/*************************************************************************//*!
		@brief			配列指定によるVector2メンバへのアクセス
*//**************************************************************************/
FORCE_INLINE const MofFloat& Vector2::operator [] ( int i ) const{
	return fv[i];
}
/*************************************************************************//*!
		@brief			==判断
*//**************************************************************************/
FORCE_INLINE bool Vector2::operator == ( const Vector2Impl& v ) const{
	return x == v.x && y == v.y;
}
/*************************************************************************//*!
		@brief			!=判断
*//**************************************************************************/
FORCE_INLINE bool Vector2::operator != ( const Vector2Impl& v ) const{
	return x != v.x || y != v.y;
}


/*************************************************************************//*!
		@brief			+演算
*//**************************************************************************/
FORCE_INLINE Vector2 operator + (const Vector2Impl& v1, const Vector2Impl& v2){
	return Vector2(v1.x + v2.x, v1.y + v2.y);
}
/*************************************************************************//*!
		@brief			+演算
*//**************************************************************************/
FORCE_INLINE Vector2 operator - (const Vector2Impl& v1, const Vector2Impl& v2){
	return Vector2(v1.x - v2.x, v1.y - v2.y);
}

//--------------------------------------------------------------------------------------------
//CVector2Utilities
//--------------------------------------------------------------------------------------------
/*************************************************************************//*!
		@brief			ベクトルの長さを調べる
		@param[in]		v			調べるベクトル

		@return			引数ベクトルの長さ
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2Utilities::Length(const Vector2Impl& v){
	return MOF_SQRT(v.x * v.x + v.y * v.y);
}
/*************************************************************************//*!
		@brief			ベクトルの長さの2乗を調べる
		@param[in]		v			調べるベクトル

		@return			引数ベクトルの長さの2乗
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2Utilities::LengthSquare(const Vector2Impl& v){
	return v.x * v.x + v.y * v.y;
}
/*************************************************************************//*!
		@brief			ベクトル間の距離を調べる
		@param[in]		v1			調べるベクトル
		@param[in]		v2			調べるベクトル

		@return			引数ベクトルの長さ
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2Utilities::Distance(const Vector2Impl& v1, const Vector2Impl& v2) {
	float svx = v1.x - v2.x;
	float svy = v1.y - v2.y;
	return MOF_SQRT(svx * svx + svy * svy);
}
/*************************************************************************//*!
		@brief			単位ベクトルを求める
		@param[in]		v1			計算ベクトル
		@param[out]		OutVec		出力ベクトル

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2Utilities::Normal(const Vector2Impl& v1,Vector2Impl& OutVec){
	MofFloat d = Length(v1);
	if(d > 0)
	{
		d = 1 / d;
	}
	else
	{
		d = 0;
	}
	OutVec.x = v1.x * d;
	OutVec.y = v1.y * d;
	return;
}

//--------------------------------------------------------------------------------------------
//CVector2
//--------------------------------------------------------------------------------------------
/*************************************************************************//*!
		@brief			コンストラクタ
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::CVector2() :
Vector2() {
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		vx			X
		@param[in]		vy			Y

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::CVector2(MofFloat vx,MofFloat vy) :
Vector2(vx,vy) {
}
/*************************************************************************//*!
		@brief			コンストラクタ
		@param[in]		pv			座標

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::CVector2(LPMofFloat pv) : 
Vector2(pv) {
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーベクトル

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::CVector2(const Vector2& pObj) :
Vector2(pObj) {
}
/*************************************************************************//*!
		@brief			コピーコンストラクタ
		@param[in]		pObj		コピーベクトル

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::CVector2(const CVector2& pObj) :
Vector2(pObj) {
}
/*************************************************************************//*!
		@brief			デストラクタ
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE CVector2::~CVector2(){
}
/*************************************************************************//*!
		@brief			ベクトルの長さを調べる
		@param			None

		@return			ベクトルの長さ
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::Length(void) const{
	return MOF_SQRT(x * x + y * y);
}
/*************************************************************************//*!
		@brief			ベクトルの長さの2乗を調べる
		@param			None

		@return			ベクトルの長さの2乗
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::LengthSquare(void) const{
	return x * x + y * y;
}
/*************************************************************************//*!
		@brief			単位ベクトルを求める
		@param[out]		OutVec		出力ベクトル

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2::Normal(Vector2& OutVec) const{
	MofFloat d = Length();
	if(d > 0)
	{
		d = 1 / d;
	}
	else
	{
		d = 0;
	}
	OutVec.x = x * d;
	OutVec.y = y * d;
	return;
}
/*************************************************************************//*!
		@brief			値を絶対値にする
		@param			None

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2::Absolute(void){
	x = MOF_ABS(x);
	y = MOF_ABS(y);
	return;
}
/*************************************************************************//*!
		@brief			値のクリッピング
		@param[in]		l			最小値
		@param[in]		h			最大値

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2::Cliping(const MofFloat l,const MofFloat h){
	x = MOF_CLIPING(x,l,h);
	y = MOF_CLIPING(y,l,h);
	return;
}
/*************************************************************************//*!
		@brief			値のクリッピング
		@param[in]		l			最小値
		@param[in]		h			最大値

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2::Cliping(const Vector2& l,const Vector2& h){
	x = MOF_CLIPING(x,l.x,h.x);
	y = MOF_CLIPING(y,l.y,h.y);
	return;
}
/*************************************************************************//*!
		@brief			数値の設定
		@param[in]		vx			X
		@param[in]		vy			Y

		@return			None
*//**************************************************************************/
FORCE_INLINE void CVector2::SetValue(MofFloat vx,MofFloat vy){
	x = vx;
	y = vy;
	return;
}
/*************************************************************************//*!
		@brief			最大の数値の取得
		@param			None

		@return			X,Yの最大値
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::GetMaxValue(void) const {
	return MOF_MAX(x,y);
}
/*************************************************************************//*!
		@brief			絶対値の最大の数値の取得
		@param			None

		@return			X,Yの絶対値の最大値
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::GetMaxAbsValue(void) const {
	return MOF_MAX(MOF_ABS(x),MOF_ABS(y));
}
/*************************************************************************//*!
		@brief			最低の数値の取得
		@param			None

		@return			X,Yの最小値
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::GetMinValue(void) const {
	return MOF_MIN(x,y);
}
/*************************************************************************//*!
		@brief			絶対値の最低の数値の取得
		@param			None

		@return			X,Yの絶対値の最小値
*//**************************************************************************/
FORCE_INLINE MofFloat CVector2::GetMinAbsValue(void) const {
	return MOF_MIN(MOF_ABS(x),MOF_ABS(y));
}
/*************************************************************************//*!
		@brief			代入
*//**************************************************************************/
FORCE_INLINE CVector2& CVector2::operator = (const Vector2Impl& v) {
	x = v.x;
	y = v.y;
	return *this;
}
/*************************************************************************//*!
		@brief			代入
*//**************************************************************************/
FORCE_INLINE CVector2& CVector2::operator = ( const Vector2& v ){
	x = v.x;
	y = v.y;
	return *this;
}

//[EOF]