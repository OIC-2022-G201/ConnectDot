/*************************************************************************//*!
					
					@file	Matrix33.h
					@brief	3×3行列演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__MATRIX33__H__

#define		__MATRIX33__H__

//INCLUDE
#include	"Vector4.h"

namespace Mof {
	
	//4x4行列の前方定義
	struct MOFLIBRARY_API Matrix44;
	//クオータニオン行列の前方定義
	struct MOFLIBRARY_API Quaternion;

	/*******************************//*!
	@brief	3x3行列構造体

			3x3行列を扱うための構造体。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API Matrix33 {
		union {
			struct {
				MofFloat				_11, _12, _13;
				MofFloat				_21, _22, _23;
				MofFloat				_31, _32, _33;
			};
			MofFloat rc[3][3];
			MofFloat val[9];
		};

		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		Matrix33();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		f11			11成分
				@param[in]		f12			12成分
				@param[in]		f13			13成分
				@param[in]		f21			21成分
				@param[in]		f22			22成分
				@param[in]		f23			23成分
				@param[in]		f31			31成分
				@param[in]		f32			32成分
				@param[in]		f33			33成分

				@return			None
		*//**************************************************************************/
		Matrix33(	MofFloat f11 ,MofFloat f12 ,MofFloat f13,
					MofFloat f21 ,MofFloat f22 ,MofFloat f23,
					MofFloat f31 ,MofFloat f32 ,MofFloat f33 );
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pf			パラメーター（16個以上の配列であること）

				@return			None
		*//**************************************************************************/
		Matrix33( MofFloat* pf );
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー行列

				@return			None
		*//**************************************************************************/
		Matrix33( const Matrix33& pObj );
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			floatキャスト<br>
								内部の座標をfloatポインタとしてそのまま返す。
		*//**************************************************************************/
		operator LPMofFloat ();
		/*************************************************************************//*!
				@brief			+取得
		*//**************************************************************************/
		Matrix33 operator + () const;
		/*************************************************************************//*!
				@brief			-取得
		*//**************************************************************************/
		Matrix33 operator - () const;
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Matrix33& operator += ( const Matrix33& m );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Matrix33& operator -= ( const Matrix33& m );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		Matrix33& operator *= ( const MofFloat m );
		/*************************************************************************//*!
				@brief			Matrix33との*=演算
		*//**************************************************************************/
		Matrix33& operator *= ( const Matrix33& m );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		Matrix33& operator /= ( const MofFloat m );
		/*************************************************************************//*!
				@brief			+演算
		*//**************************************************************************/
		Matrix33 operator + ( const Matrix33& m ) const;
		/*************************************************************************//*!
				@brief			-演算
		*//**************************************************************************/
		Matrix33 operator - ( const Matrix33& m ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		Matrix33 operator * ( const MofFloat m ) const;
		/*************************************************************************//*!
				@brief			Vector2との*演算
		*//**************************************************************************/
		Vector2 operator * ( const Vector2& v ) const;
		/*************************************************************************//*!
				@brief			Vector3との*演算
		*//**************************************************************************/
		Vector3 operator * ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Vector4との*演算
		*//**************************************************************************/
		Vector4 operator * ( const Vector4& v ) const;
		/*************************************************************************//*!
				@brief			Matrix33との*演算
		*//**************************************************************************/
		Matrix33 operator * ( const Matrix33& m ) const;
		/*************************************************************************//*!
				@brief			Matrix44との*演算
		*//**************************************************************************/
		Matrix44 operator * ( const Matrix44& m ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		Matrix33 operator / ( const MofFloat m ) const;
		/*************************************************************************//*!
				@brief			配列指定によるMatrix33メンバへのアクセス
		*//**************************************************************************/
		MofFloat& operator [] ( int i );
		/*************************************************************************//*!
				@brief			配列指定によるMatrix33メンバへのアクセス
		*//**************************************************************************/
		const MofFloat& operator [] ( int i ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const Matrix33& m ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const Matrix33& m ) const;
	}Matrix33;
	
	/*******************************//*!
	@brief	3x3行列演算クラス

			Matrix33構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CMatrix33Utilities {
	public:
		/*************************************************************************//*!
				@brief			単位行列設定
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Identity(Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			転置行列設定<br>
								入力行列と出力行列に同じ参照を設定する場合、引数が一つの方を利用すること
				@param[in]		InMat		入力行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Transpose(const Matrix33& InMat,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			転置行列設定
				@param[in,out]	OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Transpose(Matrix33& OutMat);

		/*************************************************************************//*!
				@brief			行列式計算
				@param[in]		Mat			計算行列

				@return			行列式
		*//**************************************************************************/
		static MofFloat Determinant(const Matrix33& Mat);
		/*************************************************************************//*!
				@brief			逆行列計算
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Inverse(const Matrix33& InMat,Matrix33& OutMat);
		
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		v			倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		s			倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const MofFloat s,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		v			倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const Matrix33& InMat,const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		s			倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const Matrix33& InMat,const MofFloat s,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const Matrix33& InMat,const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);

		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を結果行列に設定する。
				@param[in]		v			倍率
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const Vector3& v,const Matrix33& InMat,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を結果行列に設定する。
				@param[in]		s			倍率
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const MofFloat s,const Matrix33& InMat,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を結果行列に設定する。
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void Scaling(const MofFloat x,const MofFloat y,const MofFloat z,const Matrix33& InMat,Matrix33& OutMat);

		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Y→Zの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationXYZ(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Y→Zの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationXYZ(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Z→Yの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationXZY(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Z→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationXZY(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→X→Zの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationYXZ(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→X→Zの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationYXZ(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→Z→Xの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationYZX(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→Z→Xの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationYZX(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→X→Yの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZXY(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→X→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZXY(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Y→Xの順で回転を行う
				@param[in]		v			回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZYX(const Vector3& v,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Y→Xの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZYX(const MofFloat x,const MofFloat y,const MofFloat z,Matrix33& OutMat);

		/*************************************************************************//*!
				@brief			X軸回転行列計算
				@param[in]		ax			X回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationX(const MofFloat ax,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			X軸回転行列計算<br>
								元行列 × X回転行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		ax			X回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationX(const Matrix33& InMat,const MofFloat ax,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			X軸回転行列計算<br>
								X回転行列 × 元行列の結果を結果行列に設定する。
				@param[in]		ax			X回転
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationX(const MofFloat ax,const Matrix33& InMat,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算
				@param[in]		ay			Y回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationY(const MofFloat ay,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算<br>
								元行列 × Y回転行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		ay			Y回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationY(const Matrix33& InMat,const MofFloat ay,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算<br>
								Y回転行列 × 元行列の結果を結果行列に設定する。
				@param[in]		ay			Y回転
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationY(const MofFloat ay,const Matrix33& InMat,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算
				@param[in]		az			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZ(const MofFloat az,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算<br>
								元行列 × Z回転行列の結果を結果行列に設定する。
				@param[in]		InMat		元行列
				@param[in]		az			Z回転
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZ(const Matrix33& InMat,const MofFloat az,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算<br>
								Z回転行列 × 元行列の結果を結果行列に設定する。
				@param[in]		az			Z回転
				@param[in]		InMat		元行列
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationZ(const MofFloat az,const Matrix33& InMat,Matrix33& OutMat);
		
		/*************************************************************************//*!
				@brief			指定軸回転行列計算
				@param[in]		a			回転
				@param[in]		v			軸
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		static void RotationAxis(const MofFloat a,const CVector3& v,Matrix33& OutMat);

		/*************************************************************************//*!
				@brief			元行列の拡大ベクトル取得
				@param[in]		InMat		元行列
				@param[out]		v			倍率

				@return			None
		*//**************************************************************************/
		static void GetScaling(const Matrix33& InMat,Vector3& v);
		/*************************************************************************//*!
				@brief			元行列の回転ベクトル取得
				@param[in]		InMat		元行列
				@param[out]		v			回転

				@return			None
		*//**************************************************************************/
		static void GetRotation(const Matrix33& InMat,Vector3& v);
		/*************************************************************************//*!
				@brief			元行列の回転成分のみの行列取得
				@param[in]		InMat		元行列
				@param[out]		m			回転

				@return			None
		*//**************************************************************************/
		static void GetRotation(const Matrix33& InMat,Matrix33& m);
		/*************************************************************************//*!
				@brief			元行列の回転クオータニオン取得
				@param[in]		InMat		元行列
				@param[out]		q			回転

				@return			None
		*//**************************************************************************/
		static void GetRotation(const Matrix33& InMat,Quaternion& q);
		/*************************************************************************//*!
				@brief			元行列の回転ベクトル取得
				@param[in]		InMat		元行列
				@param[out]		v			回転

				@return			None
		*//**************************************************************************/
		static void GetYawPitchRoll(const Matrix33& InMat,Vector3& v);


	private:

		//作成を禁止する
		CMatrix33Utilities(){};
		CMatrix33Utilities(const CMatrix33Utilities& pObj){};
	};
	
	/*******************************//*!
	@brief	3x3行列クラス

			Matrix33構造体を扱うための関数を含めたクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CMatrix33 : public Matrix33 , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CMatrix33();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		f11			11成分
				@param[in]		f12			12成分
				@param[in]		f13			13成分
				@param[in]		f21			21成分
				@param[in]		f22			22成分
				@param[in]		f23			23成分
				@param[in]		f31			31成分
				@param[in]		f32			32成分
				@param[in]		f33			33成分

				@return			None
		*//**************************************************************************/
		CMatrix33(	MofFloat f11 ,MofFloat f12 ,MofFloat f13,
					MofFloat f21 ,MofFloat f22 ,MofFloat f23,
					MofFloat f31 ,MofFloat f32 ,MofFloat f33);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pf			パラメーター（16個以上の配列であること）

				@return			None
		*//**************************************************************************/
		CMatrix33( MofFloat* pf );
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー行列

				@return			None
		*//**************************************************************************/
		CMatrix33( const Matrix33& pObj );
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー行列

				@return			None
		*//**************************************************************************/
		CMatrix33( const CMatrix33& pObj );
		
		/*************************************************************************//*!
				@brief			単位行列設定
				@param			None

				@return			None
		*//**************************************************************************/
		void Identity(void);
		/*************************************************************************//*!
				@brief			転置行列設定
				@param			None

				@return			None
		*//**************************************************************************/
		void Transpose(void);

		/*************************************************************************//*!
				@brief			行列式計算
				@param			None

				@return			行列式
		*//**************************************************************************/
		MofFloat Determinant(void) const;
		/*************************************************************************//*!
				@brief			逆行列計算
				@param			None

				@return			None
		*//**************************************************************************/
		void Inverse(void);
		/*************************************************************************//*!
				@brief			逆行列計算
				@param[out]		OutMat		結果行列

				@return			None
		*//**************************************************************************/
		void Inverse(Matrix33& OutMat) const;
		
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		v			倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const Vector3& v);
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		s			倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const MofFloat s);
		/*************************************************************************//*!
				@brief			スケーリング行列計算
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const MofFloat x,const MofFloat y,const MofFloat z);
		
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		v			倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const Matrix33& InMat,const Vector3& v);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		s			倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const Matrix33& InMat,const MofFloat s);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								元行列 × 拡大行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率

				@return			None
		*//**************************************************************************/
		void Scaling(const Matrix33& InMat,const MofFloat x,const MofFloat y,const MofFloat z);

		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を自身に設定する。
				@param[in]		v			倍率
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void Scaling(const Vector3& v,const Matrix33& InMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を自身に設定する。
				@param[in]		s			倍率
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void Scaling(const MofFloat s,const Matrix33& InMat);
		/*************************************************************************//*!
				@brief			スケーリング行列計算<br>
								拡大行列 × 元行列の結果を自身に設定する。
				@param[in]		x			X倍率
				@param[in]		y			Y倍率
				@param[in]		z			Z倍率
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void Scaling(const MofFloat x,const MofFloat y,const MofFloat z,const Matrix33& InMat);

		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Y→Zの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationXYZ(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Y→Zの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationXYZ(const MofFloat x,const MofFloat y,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Z→Yの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationXZY(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Z→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationXZY(const MofFloat x,const MofFloat y,const MofFloat z);
		
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→X→Zの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationYXZ(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→X→Zの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationYXZ(const MofFloat x,const MofFloat y,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→Z→Xの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationYZX(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→Z→Xの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationYZX(const MofFloat x,const MofFloat y,const MofFloat z);
		
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→X→Yの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationZXY(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→X→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZXY(const MofFloat x,const MofFloat y,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Y→Xの順で回転を行う
				@param[in]		v			回転

				@return			None
		*//**************************************************************************/
		void RotationZYX(const Vector3& v);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Y→Xの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZYX(const MofFloat x,const MofFloat y,const MofFloat z);
		
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転

				@return			None
		*//**************************************************************************/
		void RotationXY(const MofFloat x,const MofFloat y);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Zの順で回転を行う
				@param[in]		x			X回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationXZ(const MofFloat x,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								X→Yの順で回転を行う
				@param[in]		x			X回転
				@param[in]		y			Y回転

				@return			None
		*//**************************************************************************/
		void RotationYX(const MofFloat x,const MofFloat y);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Y→Zの順で回転を行う
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationYZ(const MofFloat y,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Xの順で回転を行う
				@param[in]		x			X回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZX(const MofFloat x,const MofFloat z);
		/*************************************************************************//*!
				@brief			回転行列計算<br>
								Z→Yの順で回転を行う
				@param[in]		y			Y回転
				@param[in]		z			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZY(const MofFloat y,const MofFloat z);

		/*************************************************************************//*!
				@brief			X軸回転行列計算
				@param[in]		ax			X回転

				@return			None
		*//**************************************************************************/
		void RotationX(const MofFloat ax);
		/*************************************************************************//*!
				@brief			X軸回転行列計算<br>
								元行列 × X回転行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		ax			X回転

				@return			None
		*//**************************************************************************/
		void RotationX(const Matrix33& InMat,const MofFloat ax);
		/*************************************************************************//*!
				@brief			X軸回転行列計算<br>
								X回転行列 × 元行列の結果を自身に設定する。
				@param[in]		ax			X回転
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void RotationX(const MofFloat ax,const Matrix33& InMat);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算
				@param[in]		ay			Y回転

				@return			None
		*//**************************************************************************/
		void RotationY(const MofFloat ay);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算<br>
								元行列 × Y回転行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		ay			Y回転

				@return			None
		*//**************************************************************************/
		void RotationY(const Matrix33& InMat,const MofFloat ay);
		/*************************************************************************//*!
				@brief			Y軸回転行列計算<br>
								Y回転行列 × 元行列の結果を自身に設定する。
				@param[in]		ay			Y回転
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void RotationY(const MofFloat ay,const Matrix33& InMat);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算
				@param[in]		az			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZ(const MofFloat az);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算<br>
								元行列 × Z回転行列の結果を自身に設定する。
				@param[in]		InMat		元行列
				@param[in]		az			Z回転

				@return			None
		*//**************************************************************************/
		void RotationZ(const Matrix33& InMat,const MofFloat az);
		/*************************************************************************//*!
				@brief			Z軸回転行列計算<br>
								Z回転行列 × 元行列の結果を自身に設定する。
				@param[in]		az			Z回転
				@param[in]		InMat		元行列

				@return			None
		*//**************************************************************************/
		void RotationZ(const MofFloat az,const Matrix33& InMat);

		/*************************************************************************//*!
				@brief			指定軸回転行列計算
				@param[in]		a			回転
				@param[in]		v			軸

				@return			None
		*//**************************************************************************/
		void RotationAxis(const MofFloat a,const CVector3& v);
				
		/*************************************************************************//*!
				@brief			内部拡大ベクトル取得
				@param[out]		v			倍率

				@return			None
		*//**************************************************************************/
		void GetScaling(Vector3& v) const;
		/*************************************************************************//*!
				@brief			内部回転ベクトル取得
				@param[out]		v			回転

				@return			None
		*//**************************************************************************/
		void GetRotation(Vector3& v) const;
		/*************************************************************************//*!
				@brief			内部回転成分のみの行列取得
				@param[out]		m			回転

				@return			None
		*//**************************************************************************/
		void GetRotation(Matrix33& m) const;
		/*************************************************************************//*!
				@brief			内部回転クオータニオン取得
				@param[out]		q			回転

				@return			None
		*//**************************************************************************/
		void GetRotation(Quaternion& q) const;
		/*************************************************************************//*!
				@brief			内部回転ベクトル取得
				@param[out]		v			回転

				@return			None
		*//**************************************************************************/
		void GetYawPitchRoll(Vector3& v) const;
				
		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CMatrix33& operator = ( const Matrix33& m );

		//クラス基本定義
		MOF_LIBRARYCLASS(CMatrix33,MOF_MATRIX33CLASS_ID);
	};

	//ポインタ置き換え
	typedef CMatrix33*			LPMatrix33;

	//INLINE INCLUDE
	#include	"Matrix33.inl"

}

#endif

//[EOF]