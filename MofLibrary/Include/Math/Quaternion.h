/*************************************************************************//*!
					
					@file	Quaternion.h
					@brief	クオータニオン演算関連

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__QUATERNON__H__

#define		__QUATERNON__H__

//INCLUDE
#include	"Matrix44.h"

namespace Mof {
	
	/*******************************//*!
	@brief	クオータニオン構造体

			クオータニオンを扱うための構造体。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API Quaternion {
		union {
			float					fv[4];
			struct {
				MofFloat			x;						//!<X
				MofFloat			y;						//!<Y
				MofFloat			z;						//!<Z
				MofFloat			w;						//!<W
			};
		};
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		Quaternion();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		vx			X
				@param[in]		vy			Y
				@param[in]		vz			Z
				@param[in]		vw			W

				@return			None
		*//**************************************************************************/
		Quaternion(MofFloat vx,MofFloat vy,MofFloat vz,MofFloat vw);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		Quaternion(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピークオータニオン

				@return			None
		*//**************************************************************************/
		Quaternion(const Quaternion& pObj);
		
		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			floatキャスト<br>
								内部の座標をfloatポインタとしてそのまま返す。
		*//**************************************************************************/
		operator LPMofFloat ();
		/*************************************************************************//*!
				@brief			+取得
		*//**************************************************************************/
		Quaternion operator + () const;
		/*************************************************************************//*!
				@brief			-取得
		*//**************************************************************************/
		Quaternion operator - () const;
		/*************************************************************************//*!
				@brief			+=演算
		*//**************************************************************************/
		Quaternion& operator += ( const Quaternion& v );
		/*************************************************************************//*!
				@brief			-=演算
		*//**************************************************************************/
		Quaternion& operator -= ( const Quaternion& v );
		/*************************************************************************//*!
				@brief			floatとの*=演算
		*//**************************************************************************/
		Quaternion& operator *= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			Quaternionとの*=演算
		*//**************************************************************************/
		Quaternion& operator *= ( const Vector3& v );
		/*************************************************************************//*!
				@brief			Quaternionとの*=演算
		*//**************************************************************************/
		Quaternion& operator *= ( const Quaternion& v );
		/*************************************************************************//*!
				@brief			floatとの/=演算
		*//**************************************************************************/
		Quaternion& operator /= ( const MofFloat v );
		/*************************************************************************//*!
				@brief			+演算
		*//**************************************************************************/
		Quaternion operator + ( const Quaternion& v ) const;
		/*************************************************************************//*!
				@brief			-演算
		*//**************************************************************************/
		Quaternion operator - ( const Quaternion& v ) const;
		/*************************************************************************//*!
				@brief			floatとの*演算
		*//**************************************************************************/
		Quaternion operator * ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			Quaternionとの*演算
		*//**************************************************************************/
		Quaternion operator * ( const Vector3& v ) const;
		/*************************************************************************//*!
				@brief			Quaternionとの*演算
		*//**************************************************************************/
		Quaternion operator * ( const Quaternion& v ) const;
		/*************************************************************************//*!
				@brief			floatとの/演算
		*//**************************************************************************/
		Quaternion operator / ( const MofFloat v ) const;
		/*************************************************************************//*!
				@brief			配列指定によるQuaternionメンバへのアクセス
		*//**************************************************************************/
		MofFloat& operator [] ( int i );
		/*************************************************************************//*!
				@brief			配列指定によるQuaternionメンバへのアクセス
		*//**************************************************************************/
		const MofFloat& operator [] ( int i ) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == ( const Quaternion& v ) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != ( const Quaternion& v ) const;
	}Quaternion;
	
	/*******************************//*!
	@brief	クオータニオン演算クラス

			Quaternion構造体を扱うためのスタティッククラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CQuaternionUtilities {
	public:
		/*************************************************************************//*!
				@brief			クオータニオンの長さを調べる
				@param[in]		v			調べるクオータニオン

				@return			引数クオータニオンの長さ
		*//**************************************************************************/
		static MofFloat Length(const Quaternion& v);
		/*************************************************************************//*!
				@brief			クオータニオンの長さの2乗を調べる
				@param[in]		v			調べるクオータニオン

				@return			引数クオータニオンの長さの2乗
		*//**************************************************************************/
		static MofFloat LengthSquare(const Quaternion& v);
		/*************************************************************************//*!
				@brief			クオータニオンの内積を求める
				@param[in]		q1			計算クオータニオン１
				@param[in]		q2			計算クオータニオン２

				@return			内積
		*//**************************************************************************/
		static MofFloat Dot(const Quaternion& q1,const Quaternion& q2);
		/*************************************************************************//*!
				@brief			単位クオータニオンを求める
				@param[in]		q1			計算クオータニオン
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Normal(const Quaternion& q1,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			クオータニオンの逆数を求める
				@param[in]		q1			計算クオータニオン
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Inverse(const Quaternion& q1,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			近似クオータニオンを求める
				@param[in]		q1			計算クオータニオン
				@param[in]		q2			計算クオータニオン
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Nearest(const Quaternion& q1,const Quaternion& q2,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			球面線形補間
				@param[in]		q1			計算クオータニオン
				@param[in]		q2			計算クオータニオン
				@param[in]		t			補間（0.0〜1.0）
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Slerp(const Quaternion& q1,const Quaternion& q2,const MofFloat t,Quaternion& OutQut);

		/*************************************************************************//*!
				@brief			ベクトルの回転クオータニオンを求める
				@param[in]		v			回転ベクトル(Radian)
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Rotation(const Vector3& v,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			軸ベクトルと回転角度の回転クオータニオンを求める
				@param[in]		Angle		回転角度(Radian)
				@param[in]		v			軸ベクトル
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Rotation(const MofFloat Angle,const Vector3& v,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			ベクトル１からベクトル２への回転クオータニオンを求める
				@param[in]		v1			計算ベクトル１
				@param[in]		v2			計算ベクトル２
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Rotation(const Vector3& v1,const Vector3& v2,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			行列の回転クオータニオンを求める
				@param[in]		m			回転行列
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Rotation(const Matrix33& m,Quaternion& OutQut);
		/*************************************************************************//*!
				@brief			行列の回転クオータニオンを求める
				@param[in]		m			回転行列
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		static void Rotation(const Matrix44& m,Quaternion& OutQut);
		
		/*************************************************************************//*!
				@brief			クオータニオンでベクトルを回転させる
				@param[in]		v			計算ベクトル
				@param[in]		q			計算クオータニオン
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		static void RotationVector(const Vector3& v,const Quaternion& q,Vector3& OutVec);
		/*************************************************************************//*!
				@brief			クオータニオンでベクトルを回転させる
				@param[in]		v			計算ベクトル
				@param[in]		q			計算クオータニオン
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		static void RotationReverseVector(const Vector3& v,const Quaternion& q,Vector3& OutVec);
		
		/*************************************************************************//*!
				@brief			クオータニオンを３×３行列に変換する
				@param[in]		q			計算クオータニオン
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		static void ConvertMatrix(const Quaternion& q,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			クオータニオンを４×４行列に変換する
				@param[in]		q			計算クオータニオン
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		static void ConvertMatrix(const Quaternion& q,Matrix44& OutMat);
		/*************************************************************************//*!
				@brief			クオータニオンを３×３行列に変換して転置する
				@param[in]		q			計算クオータニオン
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		static void ConvertMatrixTranspose(const Quaternion& q,Matrix33& OutMat);
		/*************************************************************************//*!
				@brief			クオータニオンを４×４行列に変換して転置する
				@param[in]		q			計算クオータニオン
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		static void ConvertMatrixTranspose(const Quaternion& q,Matrix44& OutMat);
		/*************************************************************************//*!
				@brief			クオータニオンを回転軸ベクトルと回転角度に変換する
				@param[in]		q			計算クオータニオン
				@param[out]		OutAngle	出力角度
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		static void ConvertRotation(const Quaternion& q,MofFloat& OutAngle,Vector3& OutVec);
		/*************************************************************************//*!
				@brief			クオータニオンを回転角度に変換する
				@param[in]		q			計算クオータニオン
				@param[out]		OutAngle	出力角度

				@return			None
		*//**************************************************************************/
		static void ConvertRotation(const Quaternion& q, Vector3& OutAngle);

	private:
		//作成を禁止する
		CQuaternionUtilities(){};
		CQuaternionUtilities(const CQuaternionUtilities& pObj){};
	};

	/*******************************//*!
	@brief	クオータニオンクラス

			Quaternion構造体を扱うための関数を含めたクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CQuaternion : public Quaternion , public IMofBase {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CQuaternion();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		vx			X
				@param[in]		vy			Y
				@param[in]		vz			Z
				@param[in]		vw			W

				@return			None
		*//**************************************************************************/
		CQuaternion(MofFloat vx,MofFloat vy,MofFloat vz,MofFloat vw);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pv			座標

				@return			None
		*//**************************************************************************/
		CQuaternion(LPMofFloat pv);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピークオータニオン

				@return			None
		*//**************************************************************************/
		CQuaternion(const Quaternion& pObj);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピークオータニオン

				@return			None
		*//**************************************************************************/
		CQuaternion(const CQuaternion& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		~CQuaternion();
		
		/*************************************************************************//*!
				@brief			クオータニオンの長さを調べる
				@param			None

				@return			クオータニオンの長さ
		*//**************************************************************************/
		MofFloat Length(void) const;
		/*************************************************************************//*!
				@brief			クオータニオンの長さの2乗を調べる
				@param			None

				@return			クオータニオンの長さの2乗
		*//**************************************************************************/
		MofFloat LengthSquare(void) const;
		/*************************************************************************//*!
				@brief			クオータニオンの内積を求める
				@param[in]		v			計算クオータニオン

				@return			内積
		*//**************************************************************************/
		MofFloat Dot(const Quaternion& v) const;
		/*************************************************************************//*!
				@brief			単位クオータニオンを求める
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		void Normal(Quaternion& OutQut) const;
		/*************************************************************************//*!
				@brief			クオータニオンの逆数を求める
				@param[out]		OutQut		出力クオータニオン

				@return			None
		*//**************************************************************************/
		void Inverse(Quaternion& OutQut) const;
		/*************************************************************************//*!
				@brief			近似クオータニオン自身に設定する
				@param[in]		q1			計算クオータニオン
				@param[in]		q2			計算クオータニオン

				@return			None
		*//**************************************************************************/
		void Nearest(const Quaternion& q1,const Quaternion& q2);
		/*************************************************************************//*!
				@brief			球面線形補間
				@param[in]		q1			計算クオータニオン
				@param[in]		q2			計算クオータニオン
				@param[in]		t			補間（0.0〜1.0）

				@return			None
		*//**************************************************************************/
		void Slerp(const Quaternion& q1,const Quaternion& q2,const MofFloat t);

		/*************************************************************************//*!
				@brief			ベクトルの回転クオータニオンを求める
				@param[in]		v			回転ベクトル(Radian)

				@return			None
		*//**************************************************************************/
		void Rotation(const Vector3& v);
		/*************************************************************************//*!
				@brief			軸ベクトルと回転角度の回転クオータニオンを求める
				@param[in]		Angle		回転角度(Radian)
				@param[in]		v			軸ベクトル

				@return			None
		*//**************************************************************************/
		void Rotation(const MofFloat Angle,const Vector3& v);
		/*************************************************************************//*!
				@brief			ベクトル１からベクトル２への回転クオータニオンを求める
				@param[in]		v1			計算ベクトル１
				@param[in]		v2			計算ベクトル２

				@return			None
		*//**************************************************************************/
		void Rotation(const Vector3& v1,const Vector3& v2);
		/*************************************************************************//*!
				@brief			行列の回転クオータニオンを求める
				@param[in]		m			回転行列

				@return			None
		*//**************************************************************************/
		void Rotation(const Matrix33& m);
		/*************************************************************************//*!
				@brief			行列の回転クオータニオンを求める
				@param[in]		m			回転行列

				@return			None
		*//**************************************************************************/
		void Rotation(const Matrix44& m);
		
		/*************************************************************************//*!
				@brief			クオータニオンでベクトルを回転させる
				@param[in]		v			計算ベクトル
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		void RotationVector(const Vector3& v,Vector3& OutVec) const;
		/*************************************************************************//*!
				@brief			クオータニオンでベクトルを回転させる
				@param[in]		v			計算ベクトル
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		void RotationReverseVector(const Vector3& v,Vector3& OutVec) const;
		
		/*************************************************************************//*!
				@brief			クオータニオンを３×３行列に変換する
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		void ConvertMatrix(Matrix33& OutMat) const;
		/*************************************************************************//*!
				@brief			クオータニオンを４×４行列に変換する
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		void ConvertMatrix(Matrix44& OutMat) const;
		/*************************************************************************//*!
				@brief			クオータニオンを３×３行列に変換して転置する
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		void ConvertMatrixTranspose(Matrix33& OutMat) const;
		/*************************************************************************//*!
				@brief			クオータニオンを４×４行列に変換して転置する
				@param[out]		OutMat		出力行列

				@return			None
		*//**************************************************************************/
		void ConvertMatrixTranspose(Matrix44& OutMat) const;
		/*************************************************************************//*!
				@brief			クオータニオンを回転軸ベクトルと回転角度に変換する
				@param[out]		OutAngle	出力角度
				@param[out]		OutVec		出力ベクトル

				@return			None
		*//**************************************************************************/
		void ConvertRotation(MofFloat& OutAngle,Vector3& OutVec) const;
		/*************************************************************************//*!
				@brief			クオータニオンを回転角度に変換する
				@param[out]		OutAngle	出力角度

				@return			None
		*//**************************************************************************/
		void ConvertRotation(Vector3& OutAngle) const;

		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------

		/*************************************************************************//*!
				@brief			代入
		*//**************************************************************************/
		CQuaternion& operator = ( const Quaternion& v );

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CQuaternion,MOF_QUATERNIONCLASS_ID);
	};
	
	//ポインタ置き換え
	typedef CQuaternion*			LPQuaternion;

	//INLINE INCLUDE
	#include	"Quaternion.inl"

}

#endif

//[EOF]