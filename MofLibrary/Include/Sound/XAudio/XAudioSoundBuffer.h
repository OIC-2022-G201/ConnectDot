/*************************************************************************//*!
					
					@file	XAudioSoundBuffer.h
					@brief	XAudio2での各種サウンドバッファの処理を行う基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__XAUDIOSOUNDBUFFER__H__

#define		__XAUDIOSOUNDBUFFER__H__

//INCLUDE
#include	"../SoundBufferBase.h"

namespace Mof {
	
	/*******************************//*!
	@brief	XAudio2でのサウンドバッファクラス

			XAudio2でのサウンドバッファクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CXAudioSoundBuffer : public CSoundBufferBase {
	protected:
		/*******************//*!
		サウンドバッファ
		*//********************/
		IXAudio2SourceVoice**		m_pBuffer;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CXAudioSoundBuffer();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		cnt				バッファ数

				@return			None
		*//**************************************************************************/
		CXAudioSoundBuffer(const MofU32 cnt);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj			コピーバッファ

				@return			None
		*//**************************************************************************/
		CXAudioSoundBuffer(const CXAudioSoundBuffer& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CXAudioSoundBuffer();
		
		/*************************************************************************//*!
				@brief			サウンドの読み込み
				@param[in]		pName			ファイル名
				@param[in]		Flags			読み込みフラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pName,const MofU32 Flags = 0);
		/*************************************************************************//*!
				@brief			サウンドの読み込み
				@param[in]		pName			名前
				@param[in]		pData			メモリアドレス
				@param[in]		Size			サイズ
				@param[in]		Flags			読み込みフラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pName,LPMofVoid pData,MofU32 Size,const MofU32 Flags = 0);

		/* 数の指定読み込み関数の廃止
		virtual MofBool Load(LPCMofChar pName,const MofU32 Flags, const MofU32 Count);
		virtual MofBool Load(LPCMofChar pName,LPMofVoid pData,MofU32 Size,const MofU32 Flags, const MofU32 Count);
		*/
		
		/*************************************************************************//*!
				@brief			サウンドの再生
				@param			None
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Play(void);
		/*************************************************************************//*!
				@brief			サウンドの再生
				@param[out]		on				再生開始番号
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Play(MofU32& on);
		
		/*************************************************************************//*!
				@brief			サウンドの一時停止
				@param			None
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Pause(void);
		/*************************************************************************//*!
				@brief			サウンドの一時停止
				@param[in]		n				再生番号
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Pause(MofU32 n);
		/*************************************************************************//*!
				@brief			サウンドの再開
				@param			None
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Resume(void);
		/*************************************************************************//*!
				@brief			サウンドの再開
				@param[in]		n				再生番号
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Resume(MofU32 n);
		
		/*************************************************************************//*!
				@brief			サウンドの停止
				@param			None
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Stop(void);
		/*************************************************************************//*!
				@brief			サウンドの停止
				@param[in]		n				再生番号
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Stop(MofU32 n);

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		/*************************************************************************//*!
				@brief			再生中か判定
				@param			None

				@return			TRUE			再生している<br>
								FALSE			再生していない
		*//**************************************************************************/
		virtual MofBool IsPlay(void);
		/*************************************************************************//*!
				@brief			再生中か判定
				@param[in]		n				再生番号

				@return			TRUE			再生している<br>
								FALSE			再生していない
		*//**************************************************************************/
		virtual MofBool IsPlay(MofU32 n);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			再生音量設定
				@param[in]		Vol			音量(0.0(無音)〜1.0(通常))
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetVolume(MofFloat Vol);
		/*************************************************************************//*!
				@brief			再生音量設定
				@param[in]		Vol			音量(0.0(無音)〜1.0(通常))
				@param[in]		n			再生番号
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetVolume(MofFloat Vol,MofU32 n);
		/*************************************************************************//*!
				@brief			再生ピッチ設定
				@param[in]		Pitch		ピッチ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetPitch(MofFloat Pitch);
		/*************************************************************************//*!
				@brief			同時再生数の設定 <br>
								読み込み前にのみ設定は有効。<br>
								読み込み後に設定を行った場合assertを発生させる。
				@param[in]		cnt			数
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetBufferCount(MofU32 cnt);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			サウンドバッファ取得
				@param			None

				@return			サウンドバッファ
		*//**************************************************************************/
		virtual MofSoundBuffer GetBuffer(void);
		/*************************************************************************//*!
				@brief			音ファイルの時間取得
				@param			None
				
				@return			音ファイルの時間
		*//**************************************************************************/
		virtual MofFloat GetPlayTime(void);
		
		//クラス基本定義
		MOF_LIBRARYCLASS(CXAudioSoundBuffer,MOF_XAUDIOSOUNDBUFFERCLASS_ID);
	};

	#include	"XAudioSoundBuffer.inl"
	
	//置き換え
	typedef CXAudioSoundBuffer		CSoundBuffer;
}

#endif

//[EOF]