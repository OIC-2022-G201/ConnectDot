/*************************************************************************//*!
					
					@file	CameraBase.h
					@brief	カメラ基底クラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__CAMERABASE__H__

#define		__CAMERABASE__H__

//INCLUDE
#include	"Camera.h"

namespace Mof {
	
	/*******************************//*!
	@brief	カメラ基底クラス

			カメラ基底となるクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCamera : public ICamera {
	protected:
		/*******************//*!
		名前
		*//********************/
		CString					m_Name;
		/*******************//*!
		座標系
		*//********************/
		CoordinateType			m_Coordinate;
		/*******************//*!
		ビューポート
		*//********************/
		ViewPort				m_ViewPort;
		/*******************//*!
		カメラ位置
		*//********************/
		CVector3				m_Position;
		/*******************//*!
		カメラ注視点
		*//********************/
		CVector3				m_Target;
		/*******************//*!
		カメラ前方ベクトル
		*//********************/
		CVector3				m_ViewFront;
		/*******************//*!
		カメラ上方ベクトル
		*//********************/
		CVector3				m_ViewUp;
		/*******************//*!
		プロジェクション情報
		*//********************/
		Projection				m_Projection;
		/*******************//*!
		視錐台情報
		*//********************/
		ViewFrustum				m_ViewFrustum;
		/*******************//*!
		ビュー行列
		*//********************/
		CMatrix44				m_ViewMatrix;
		/*******************//*!
		ビルボード
		*//********************/
		CMatrix33				m_BillBoardMatrix;
		/*******************//*!
		射影行列
		*//********************/
		CMatrix44				m_ProjectionMatrix;
		/*******************//*!
		ビュープロジェクション行列
		*//********************/
		CMatrix44				m_ViewProjectionMatrix;
		
		/*************************************************************************//*!
				@brief			内部視錐台情報更新
				@param			None

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		MofBool SetViewFrustum(void);
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CCamera();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		カメラ名

				@return			None
		*//**************************************************************************/
		CCamera(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーカメラ

				@return			None
		*//**************************************************************************/
		CCamera(const CCamera& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CCamera();

		/*************************************************************************//*!
				@brief			カメラの更新<br>
								設定されている情報からカメラに必要な各種行列を計算しなおす
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Update(void);

		/*************************************************************************//*!
				@brief			Targetへの注視行列計算
				@param[in]		Pos			座標
				@param[in]		Target		注視座標
				@param[in]		Up			上方ベクトル

				@return			None
		*//**************************************************************************/
		virtual void LookAt(const Vector3& Pos,const Vector3& Target,const Vector3& Up);
		
		/*************************************************************************//*!
				@brief			射影行列計算
				@param[in]		fov			視野角
				@param[in]		Aspect		アスペクト比
				@param[in]		Near		最近面
				@param[in]		Far			最遠面

				@return			None
		*//**************************************************************************/
		virtual void PerspectiveFov(const MofFloat fov,const MofFloat Aspect,const MofFloat Near,const MofFloat Far);
		/*************************************************************************//*!
				@brief			パースペクティブ射影行列計算
				@param[in]		w			幅
				@param[in]		h			高さ
				@param[in]		Near		最近面
				@param[in]		Far			最遠面

				@return			None
		*//**************************************************************************/
		virtual void Perspective(const MofFloat w,const MofFloat h,const MofFloat Near,const MofFloat Far);
		/*************************************************************************//*!
				@brief			正射影行列計算
				@param[in]		w			幅
				@param[in]		h			高さ
				@param[in]		Near		最近面
				@param[in]		Far			最遠面

				@return			None
		*//**************************************************************************/
		virtual void Ortho(const MofFloat w,const MofFloat h,const MofFloat Near,const MofFloat Far);

		/*************************************************************************//*!
				@brief			3D空間上の座標をスクリーン座標に変換する
				@param[in]		v			3D座標
				@param[out]		OutX		X座標出力
				@param[out]		OutY		Y座標出力
				@param[out]		OutZ		Z座標出力
				@param[out]		OutW		W座標出力

				@return			None
		*//**************************************************************************/
		virtual void WorldToScreen(const Vector3& v,MofFloat* OutX,MofFloat* OutY,MofFloat* OutZ = NULL,MofFloat* OutW = NULL);
		/*************************************************************************//*!
				@brief			スクリーン座標を3D空間上のレイに変換する
				@param[in]		px			X座標
				@param[in]		py			Y座標
				@param[out]		Out			3D座標出力

				@return			None
		*//**************************************************************************/
		virtual void ScreenToWorld(const MofFloat px,const MofFloat py,Vector3& Out);
		/*************************************************************************//*!
				@brief			スクリーン座標を3D空間上のレイに変換する
				@param[in]		p			座標
				@param[out]		Out			3D座標出力

				@return			None
		*//**************************************************************************/
		virtual void ScreenToWorld(const Vector2& p,Vector3& Out);
		/*************************************************************************//*!
				@brief			フラスタム内に存在するか判定する
				@param[in]		p			座標
				@param[out]		r			半径
				
				@return			TRUE		ある<br>
								FALSE		ない
		*//**************************************************************************/
		virtual MofBool IsFrustumInside(const Vector3& p,MofFloat r);
		/*************************************************************************//*!
				@brief			Y軸限定ビルボード行列計算
				@param[out]		Out			結果行列

				@return			None
		*//**************************************************************************/
		virtual void CalculateYBillBoardMatrix(CMatrix33& Out);

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			座標系設定
				@param[in]		c			座標系
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetCoordinateType(const CoordinateType c);
		/*************************************************************************//*!
				@brief			ビューポート設定<br>
								画面サイズから自動的に設定を行う。
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(void);
		/*************************************************************************//*!
				@brief			ビューポート設定
				@param[in]		r			画面矩形
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(const Rectangle& r);
		/*************************************************************************//*!
				@brief			ビューポート設定
				@param[in]		px			X位置
				@param[in]		py			Y位置
				@param[in]		w			幅
				@param[in]		h			高さ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(const MofFloat px,const MofFloat py,const MofFloat w,const MofFloat h);
		/*************************************************************************//*!
				@brief			ビューポート設定
				@param[in]		px			X位置
				@param[in]		py			Y位置
				@param[in]		w			幅
				@param[in]		h			高さ
				@param[in]		n			最近
				@param[in]		f			最遠
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(const MofFloat px,const MofFloat py,const MofFloat w,const MofFloat h,const MofFloat n,const MofFloat f);
		/*************************************************************************//*!
				@brief			ビューポート設定
				@param[in]		v			ビューポート
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPort(const ViewPort& v);
		/*************************************************************************//*!
				@brief			カメラ座標設定
				@param[in]		v			設定座標
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPosition(const Vector3& v);
		/*************************************************************************//*!
				@brief			カメラ座標設定
				@param[in]		x			設定X座標
				@param[in]		y			設定Y座標
				@param[in]		z			設定Z座標
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetViewPosition(MofFloat x,MofFloat y,MofFloat z);
		/*************************************************************************//*!
				@brief			カメラ注視点設定
				@param[in]		v			設定座標
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTargetPosition(const Vector3& v);
		/*************************************************************************//*!
				@brief			カメラ注視点設定
				@param[in]		x			設定X座標
				@param[in]		y			設定Y座標
				@param[in]		z			設定Z座標
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTargetPosition(MofFloat x, MofFloat y, MofFloat z);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			カメラ位置取得
				@param			None

				@return			カメラ位置
		*//**************************************************************************/
		virtual CVector3& GetViewPosition(void);
		/*************************************************************************//*!
				@brief			カメラ位置取得
				@param			None

				@return			カメラ位置
		*//**************************************************************************/
		virtual const CVector3& GetViewPosition(void) const;
		/*************************************************************************//*!
				@brief			注視点取得
				@param			None

				@return			注視点
		*//**************************************************************************/
		virtual CVector3& GetTargetPosition(void);
		/*************************************************************************//*!
				@brief			注視点取得
				@param			None

				@return			注視点
		*//**************************************************************************/
		virtual const CVector3& GetTargetPosition(void) const;
		/*************************************************************************//*!
				@brief			視線ベクトル取得
				@param			None

				@return			視線ベクトル
		*//**************************************************************************/
		virtual CVector3& GetViewFront(void);
		/*************************************************************************//*!
				@brief			視線ベクトル取得
				@param			None

				@return			視線ベクトル
		*//**************************************************************************/
		virtual const CVector3& GetViewFront(void) const;
		/*************************************************************************//*!
				@brief			上方ベクトル取得
				@param			None

				@return			上方ベクトル
		*//**************************************************************************/
		virtual CVector3& GetViewUp(void);
		/*************************************************************************//*!
				@brief			上方ベクトル取得
				@param			None

				@return			上方ベクトル
		*//**************************************************************************/
		virtual const CVector3& GetViewUp(void) const;
		/*************************************************************************//*!
				@brief			ビューポート設定取得
				@param			None

				@return			ビューポート
		*//**************************************************************************/
		virtual LPViewPort GetViewPort(void);
		/*************************************************************************//*!
				@brief			ビュー行列取得
				@param			None

				@return			ビュー行列
		*//**************************************************************************/
		virtual CMatrix44& GetViewMatrix(void);
		/*************************************************************************//*!
				@brief			ビュー行列取得
				@param			None

				@return			ビュー行列
		*//**************************************************************************/
		virtual const CMatrix44& GetViewMatrix(void) const;
		/*************************************************************************//*!
				@brief			ビルボード行列取得
				@param			None

				@return			ビルボード行列
		*//**************************************************************************/
		virtual CMatrix33& GetBillBoardMatrix(void);
		/*************************************************************************//*!
				@brief			ビルボード行列取得
				@param			None

				@return			ビルボード行列
		*//**************************************************************************/
		virtual const CMatrix33& GetBillBoardMatrix(void) const;
		/*************************************************************************//*!
				@brief			プロジェクション行列取得
				@param			None

				@return			プロジェクション行列
		*//**************************************************************************/
		virtual CMatrix44& GetProjectionMatrix(void);
		/*************************************************************************//*!
				@brief			プロジェクション行列取得
				@param			None

				@return			プロジェクション行列
		*//**************************************************************************/
		virtual const CMatrix44& GetProjectionMatrix(void) const;
		/*************************************************************************//*!
				@brief			ビュープロジェクション行列取得
				@param			None

				@return			ビュープロジェクション行列
		*//**************************************************************************/
		virtual CMatrix44& GetViewProjectionMatrix(void);
		/*************************************************************************//*!
				@brief			ビュープロジェクション行列取得
				@param			None

				@return			ビュープロジェクション行列
		*//**************************************************************************/
		virtual const CMatrix44& GetViewProjectionMatrix(void) const;
		/*************************************************************************//*!
				@brief			座標系取得
				@param			None

				@return			座標系
		*//**************************************************************************/
		virtual CoordinateType GetCoordinateType(void) const;
		/*************************************************************************//*!
				@brief			プロジェクション情報構造体取得
				@param			None

				@return			座標系
		*//**************************************************************************/
		virtual const Projection& GetProjectionInfo(void) const;

		//クラス基本定義
		MOF_LIBRARYCLASS(CCamera,MOF_CAMERACLASS_ID);
	};

	#include	"CameraBase.inl"

}

#endif

//[EOF]