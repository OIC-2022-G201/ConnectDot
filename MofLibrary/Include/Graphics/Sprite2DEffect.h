/*************************************************************************//*!
					
					@file	Sprite2DEffect.h
					@brief	スプライトコンテナクラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SPRITE2DEFFECT__H__

#define		__SPRITE2DEFFECT__H__

//INCLUDE
#include	"Sprite2DPart.h"
#include	"SpritePartMotionController.h"

namespace Mof {
	
	/*******************************//*!
	@brief	スプライトコンテナクラス

			スプライトコンテナクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CSprite2DEffect : public CSprite2DPart {
		//----------------------------------------------------------------------------
		////前ライブラリとの対応のためにも一般パラメーターをpublic対応にしておく
		//----------------------------------------------------------------------------
	public:
		/*******************//*!
		エフェクトパラメーター
		*//********************/
		MOFSPRITEEFFECTPARAMETER			m_EffectParameter;
		/*******************//*!
		エミッターの生成回数
		*//********************/
		MofS32								m_CreateCount;
		
		/*******************************//*!
		@brief	パーティクルの描画用の情報構造体

				パーティクルの描画用の情報構造体

		@author	CDW
		*//********************************/
		typedef struct tag_PARTICLEDRAWDATA
		{
			Vector2 position;
			float	rot;
			float	direc;

			Vector4 color;
			Vector2 scale;
		}PARTICLEDRAWDATA, *LPPARTICLEDRAWDATA;
		/*******************************//*!
		@brief	パーティクルの生成時の情報構造体

				パーティクルの生成時の情報構造体

		@author	CDW
		*//********************************/
		typedef struct tag_PARTICLEDATA
		{
			MofFloat						StartTime;
			MofFloat						LifeTime;
			MofU32							Seed;
		}ParticleData, *LPParticleData;
		/*******************//*!
		生成したパーティクル情報
		*//********************/
		CDynamicArray< LPParticleData >		m_ParticleData;
		/*******************//*!
		乱数テーブル
		*//********************/
		CDynamicArray< MofU32 >				m_SeedTable;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CSprite2DEffect();
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーテクスチャ

				@return			None
		*//**************************************************************************/
		CSprite2DEffect(const CSprite2DEffect& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CSprite2DEffect();
		
		/*************************************************************************//*!
				@brief			テクスチャのコピー生成
				@param			None
				
				@return			作成されたコピーテクスチャ<br>
								作成に失敗した場合NULLを返す
		*//**************************************************************************/
		virtual ISprite* CreateCopyObject(void) const;
		
		/*************************************************************************//*!
				@brief			スプライトの更新
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Update(void);
		/*************************************************************************//*!
				@brief			パーティクルの更新<br>
								指定の時間におけるパーティクルの情報を計算する
				@param[in]		t			時間
				@param[in]		pt			出力するパーティクルの生成情報
				@param[in,out]	p			出力するパーティクル情報
				@param[in]		rec			再計算フラグ

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool UpdateParticle(MofFloat t, LPParticleData pt, PARTICLEDRAWDATA& p, MofBool rec = FALSE);

		/*************************************************************************//*!
				@brief			エミッターのリセット
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool ResetEmitter(void);
		/*************************************************************************//*!
				@brief			エミッターを所定の時間の状態に設定する
				@param[in]		nt			時間

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool RefreshEmitter(MofFloat nt);
		
		/*************************************************************************//*!
				@brief			スプライトの描画
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Render(void);
		/*************************************************************************//*!
				@brief			スプライトの描画
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool RenderPart(void);
		
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		/*************************************************************************//*!
				@brief			現在のモーションが終了しているかを判定する。<br>
								モーションがループする場合はTRUEになることはない
				@param			None
				
				@return			TRUE			終了済み<br>
								FALE			まだ終了していない
		*//**************************************************************************/
		MofBool IsEndMotion(void);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------

		//クラス基本定義
		MOF_LIBRARYCLASS(CSprite2DEffect,MOF_SPRITE2DEFFECTCLASS_ID);
	};

	#include	"Sprite2DEffect.inl"

	//ポインタ置き換え
	typedef CSprite2DEffect*			LPSprite2DEffect;
}

#endif

//[EOF]