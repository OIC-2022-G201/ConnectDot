/*************************************************************************//*!
					
					@file	PolyCircle.h
					@brief	ポリサークルジオメトリ。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__POLICircle__H__

#define		__POLICircle__H__

//INCLUDE
#include	"GraphicsPlatform.h"

namespace Mof {
	
	/*******************************//*!
	@brief	ポリライン用ポイント情報

			ポリライン用ポイント情報構造体

	@author	CDW
	*//********************************/
	typedef MOF_ALIGNED16_STRUCT tag_POLYCIRCLEPOINT {
		CVector3				Revise;
		MofFloat				Radius;
		MofU32					Start;
		CVector4				Color;
		
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		tag_POLYCIRCLEPOINT() :
		Revise() ,
		Radius(0.0f) ,
		Start(0) ,
		Color(1.0f, 1.0f, 1.0f, 1.0f) {
		}

		MOF_ALIGNED_NEW_OPERATOR(tag_POLYCIRCLEPOINT);
	}POLYCIRCLEPOINT, *LPPOLYCIRCLEPOINT;
	typedef CDynamicArray< POLYCIRCLEPOINT > CPolyCirclePointArray, *LPPolyCirclePointArray;

	/*******************************//*!
	@brief	ポリラインジオメトリ

			ポリラインジオメトリ

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CPolyCircle : public CGeometry {
	protected:
		/*******************//*!
		分割数
		*//********************/
		MofU32								m_Slices;
		/*******************//*!
		ポイント配列
		*//********************/
		LPPolyCirclePointArray				m_pPointArray;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CPolyCircle();
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CPolyCircle();

		/*************************************************************************//*!
				@brief			作成
				@param[in]		r				半径
				@param[in]		d				分割
				@param[in]		s				分割
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Create(MofFloat r,MofU32 d, MofU32 s);
		
		/*************************************************************************//*!
				@brief			更新
				@param			None
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool UpdateGeometry(void);
		
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat,const Vector4& col);
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat,const Vector4& col, LPShader pShader, LPShaderBind pShaderBind);

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			周囲色設定
				@param[in]		cn				周番号
				@param[in]		c				色

				@return			TRUE			正常終了<br>
				それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetColor(MofU32 cn,CVector4& c);
		/*************************************************************************//*!
				@brief			周囲半径設定
				@param[in]		cn				周番号
				@param[in]		r				半径

				@return			TRUE			正常終了<br>
				それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetRadius(MofU32 cn,MofFloat r);
		/*************************************************************************//*!
				@brief			周囲半径比率維持設定
				@param[in]		cn				周番号
				@param[in]		r				半径

				@return			TRUE			正常終了<br>
				それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetRadiusRatio(MofU32 cn,MofFloat r);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			合計半径取得
				@param			None

				@return			合計半径
		*//**************************************************************************/
		virtual MofFloat GetRadius(void);
		/*************************************************************************//*!
				@brief			半径取得
				@param[in]		cn				周番号

				@return			半径
		*//**************************************************************************/
		virtual MofFloat GetRadius(MofU32 cn);
		/*************************************************************************//*!
				@brief			円周の数取得
				@param			None

				@return			円周の数
		*//**************************************************************************/
		virtual MofU32 GetCircleCount(void);
		/*************************************************************************//*!
				@brief			円周取得
				@param			None

				@return			円周
		*//**************************************************************************/
		virtual LPPOLYCIRCLEPOINT GetCircleArray(void);
	};

	//ポインタ置き換え
	typedef CPolyCircle*		LPPolyCircle;

	#include	"PolyCircle.inl"
}

#endif

//[EOF]