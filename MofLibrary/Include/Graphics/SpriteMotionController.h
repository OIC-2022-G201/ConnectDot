/*************************************************************************//*!
					
					@file	SpriteMotionController.h
					@brief	スプライトモーション管理クラス。<br>
							スプライトアニメーションの時間と状態を管理する。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SPRITEMOTIONCONTROLLER__H__

#define		__SPRITEMOTIONCONTROLLER__H__

//INCLUDE
#include	"MotionController.h"
#include	"SpriteAnimation.h"

namespace Mof {
	
	/*******************************//*!
	@brief	スプライトモーション管理クラス

			スプライトモーション管理クラス。<br>
			スプライトアニメーションの時間と状態を管理する。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CSpriteMotionController : public IMotionController {
	protected:
		/*******************//*!
		モーション時間
		*//********************/
		MofFloat					m_MotionTime;
		/*******************//*!
		モーション番号
		*//********************/
		MofS32						m_MotionNo;

		/*******************//*!
		アニメーション配列
		*//********************/
		LPSpriteAnimationArray		m_pAnimation;

		/*******************//*!
		現在状態矩形
		*//********************/
		CRectangle					m_SrcRect;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CSpriteMotionController();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		ac			アニメーション生成情報

				@return			None
		*//**************************************************************************/
		CSpriteMotionController(SpriteAnimationCreate& ac);
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pac			アニメーション生成情報
				@param[in]		acnt		アニメーション数

				@return			None
		*//**************************************************************************/
		CSpriteMotionController(const LPSpriteAnimationCreate pac,const MofU32 acnt);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーオブジェクト

				@return			None
		*//**************************************************************************/
		CSpriteMotionController(const CSpriteMotionController& pObj);

		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CSpriteMotionController();
		
		/*************************************************************************//*!
				@brief			生成<br>
								現在すでに生成されている情報を全て解放をして新しいコントローラーを生成する
				@param[in]		ac				アニメーション生成情報
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(SpriteAnimationCreate& ac);
		/*************************************************************************//*!
				@brief			生成<br>
								現在すでに生成されている情報を全て解放をして新しいコントローラーを生成する
				@param[in]		pac				アニメーション生成情報
				@param[in]		acnt			アニメーション数
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(const LPSpriteAnimationCreate pac,const MofU32 acnt);

		/*************************************************************************//*!
				@brief			現在の状態を更新
				@param			None
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Refresh(void);
		/*************************************************************************//*!
				@brief			現在のモーション状態を更新
				@param[in]		t				更新時間
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool AddTimer(MofFloat t);

		/*************************************************************************//*!
				@brief			現在のモーションを変更
				@param[in]		n				モーション番号
				@param[in]		bSame			同一モーションでの更新フラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool ChangeMotion(MofU32 n,MofBool bSame = TRUE);
		/*************************************************************************//*!
				@brief			現在のモーションを変更
				@param[in]		str				モーション名
				@param[in]		bSame			同一モーションでの更新フラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool ChangeMotionByName(LPCMofChar str,MofBool bSame = TRUE);
				
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Is
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			現在のモーションが終了しているかを判定する。<br>
								モーションがループする場合はTRUEになることはない
				@param			None
				
				@return			TRUE			終了済み<br>
								FALE			まだ終了していない
		*//**************************************************************************/
		virtual MofBool IsEndMotion(void);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			現在のモーション時間を設定
				@param[in]		t				設定時間
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTime(MofFloat t);
		/*************************************************************************//*!
				@brief			モーションのループフラグの設定
				@param[in]		n				モーション番号
				@param[in]		bLoop			ループフラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetMotionLoop(MofU32 n,MofBool bLoop);
		/*************************************************************************//*!
				@brief			モーションのループフラグの設定
				@param[in]		str				モーション名
				@param[in]		bLoop			ループフラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetMotionLoopByName(LPCMofChar str,MofBool bLoop);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			現在のモーション時間取得
				@param			None

				@return			現在のモーション時間
		*//**************************************************************************/
		virtual MofFloat GetTime(void) const;
		/*************************************************************************//*!
				@brief			現在のモーション番号取得
				@param			None

				@return			現在のモーション番号
		*//**************************************************************************/
		virtual MofS32 GetMotionNo(void) const;
		/*************************************************************************//*!
				@brief			登録されているモーション数取得
				@param			None

				@return			登録されているモーション数
		*//**************************************************************************/
		virtual MofS32 GetMotionCount(void) const;
		/*************************************************************************//*!
				@brief			現在のフレーム番号取得
				@param			None

				@return			現在のフレーム番号
		*//**************************************************************************/
		virtual MofS32 GetFrameNo(void);
		/*************************************************************************//*!
				@brief			現在のアニメーション矩形取得
				@param			None

				@return			現在のアニメーション矩形
		*//**************************************************************************/
		virtual CRectangle& GetSrcRect(void);
		/*************************************************************************//*!
				@brief			現在のアニメーション矩形取得
				@param			None

				@return			現在のアニメーション矩形
		*//**************************************************************************/
		virtual const CRectangle& GetSrcRect(void) const;
		
		//クラス基本定義
		MOF_LIBRARYCLASS(CSpriteMotionController,MOF_SPRITEMOTIONCONTROLLERCLASS_ID);
	};

	#include	"SpriteMotionController.inl"

	typedef CSpriteMotionController *LPSpriteMotionController;
}

#endif

//[EOF]