/*************************************************************************//*!
					
					@file	Shader.h
					@brief	シェーダー基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SHADER__H__

#define		__SHADER__H__

//INCLUDE
#include	"ShaderTechnique.h"

namespace Mof {
	
	/*******************************//*!
	@brief	シェーダーインターフェイス

			シェーダーの読み込み、設定を行うためのインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IShader : public IMofNamedObject {
	protected:
	public:
		/*************************************************************************//*!
				@brief			シェーダーの読み込み<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pName		ファイル名
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pName, MofU32 Flags = SHADERCOMPILE_DEFAULTFLAG) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの読み込み<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pS			シェーダー
				@param[in]		SSize		シェーダーサイズ
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPMofVoid pS, MofU32 SSize, MofU32 Flags = SHADERCOMPILE_DEFAULTFLAG) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの読み込み<br>
								頂点シェーダー、ピクセルシェーダー個別読み込み<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pVName		頂点シェーダーファイル名
				@param[in]		pPName		ピクセルシェーダーファイル名
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pVName, LPCMofChar pPName, MofU32 Flags = SHADERCOMPILE_DEFAULTFLAG) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの読み込み<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pVS			頂点シェーダー
				@param[in]		VSSize		頂点シェーダーサイズ
				@param[in]		pPS			ピクセルシェーダー
				@param[in]		PSSize		ピクセルシェーダーサイズ
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPMofVoid pVS, MofU32 VSSize, LPMofVoid pPS, MofU32 PSSize, MofU32 Flags = SHADERCOMPILE_DEFAULTFLAG) = 0;
		
		/*************************************************************************//*!
				@brief			コンパイル済みシェーダーの生成<br>
								Microsoft提供のEffects11ライブラリを使用。<br>
								テクニックの指定に対応。
				@param[in]		pName		ファイル名
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(LPCMofChar pName, MofU32 Flags = 0) = 0;
		/*************************************************************************//*!
				@brief			コンパイル済みシェーダーの生成<br>
								Microsoft提供のEffects11ライブラリを使用。<br>
								テクニックの指定に対応。
				@param[in]		pS			シェーダー
				@param[in]		SSize		シェーダーサイズ
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(LPMofVoid pS, MofU32 SSize, MofU32 Flags = 0) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの生成<br>
								頂点シェーダー、ピクセルシェーダー個別読み込み<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pVName		頂点シェーダーファイル名
				@param[in]		pPName		ピクセルシェーダーファイル名
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(LPCMofChar pVName, LPCMofChar pPName, MofU32 Flags = 0) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの生成<br>
								利用するグラフィクスライブラリによって読み込みの対応が違うため、<br>
								対応状況は各派生先のシェーダークラスを参照すること。
				@param[in]		pVS			頂点シェーダー
				@param[in]		VSSize		頂点シェーダーサイズ
				@param[in]		pPS			ピクセルシェーダー
				@param[in]		PSSize		ピクセルシェーダーサイズ
				@param[in]		Flags		読み込みフラグ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(LPMofVoid pVS, MofU32 VSSize, LPMofVoid pPS, MofU32 PSSize, MofU32 Flags = 0) = 0;
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			テクニック設定
				@param[in]		tn			テクニック番号
					
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTechnique(MofU32 tn) = 0;
		/*************************************************************************//*!
				@brief			テクニック設定
				@param[in]		pName		テクニック名
					
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTechniqueByName(LPCMofChar pName) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			シェーダーの取得
				@param			None

				@return			シェーダー
		*//**************************************************************************/
		virtual MofShaderEffect GetShader(void) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの取得
				@param			None

				@return			シェーダー
		*//**************************************************************************/
		virtual MofVertexShader GetVertexShader(void) = 0;
		/*************************************************************************//*!
				@brief			シェーダーの取得
				@param			None

				@return			シェーダー
		*//**************************************************************************/
		virtual MofPixelShader GetPixelShader(void) = 0;
		/*************************************************************************//*!
				@brief			設定バッファの数取得
				@param			None

				@return			設定バッファ
		*//**************************************************************************/
		virtual MofU32 GetBufferCount(void) const = 0;
		/*************************************************************************//*!
				@brief			設定バッファの数取得
				@param			None

				@return			設定バッファ
		*//**************************************************************************/
		virtual MofU32 GetGlobalVariableCount(void) const = 0;
		/*************************************************************************//*!
				@brief			設定バッファの数取得
				@param			None

				@return			設定バッファ
		*//**************************************************************************/
		virtual MofU32 GetInterfaceCount(void) const = 0;
		/*************************************************************************//*!
				@brief			テクニックの数取得
				@param			None

				@return			テクニックの数
		*//**************************************************************************/
		virtual MofU32 GetTechniqueCount(void) const = 0;
		/*************************************************************************//*!
				@brief			テクニック取得
				@param			None

				@return			テクニック<br>
								存在しない場合NULL
		*//**************************************************************************/
		virtual LPShaderTechnique GetTechnique(void) = 0;
		/*************************************************************************//*!
				@brief			テクニック取得
				@param[in]		n			テクニック

				@return			テクニック<br>
								存在しない場合NULL
		*//**************************************************************************/
		virtual LPShaderTechnique GetTechnique(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			テクニック取得
				@param[in]		pName		テクニック名

				@return			テクニック<br>
								存在しない場合NULL
		*//**************************************************************************/
		virtual LPShaderTechnique GetTechniqueByName(LPCMofChar pName) = 0;
	};

	//ポインタ置き換え
	typedef IShader*			LPShader;
	typedef CDynamicArray< LPShader >		CShaderArray, *LPShaderArray;
}

#endif

//[EOF]