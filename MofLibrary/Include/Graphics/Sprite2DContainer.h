/*************************************************************************//*!
					
					@file	Sprite2DContainer.h
					@brief	スプライトコンテナクラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SPRITE2DCONTAINER__H__

#define		__SPRITE2DCONTAINER__H__

//INCLUDE
#include	"Sprite2DPart.h"
#include	"SpriteContainerAnimation.h"
#include	"SpritePartMotionController.h"

namespace Mof {
	
	/*******************************//*!
	@brief	スプライトコンテナクラス

			スプライトコンテナクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CSprite2DContainer : public CSprite2DPart {
		//----------------------------------------------------------------------------
		////前ライブラリとの対応のためにも一般パラメーターをpublic対応にしておく
		//----------------------------------------------------------------------------
	public:
		/*******************//*!
		内部テクスチャリスト
		*//********************/
		LPTextureArray					m_pTextureArray;
		/*******************//*!
		アニメーション
		*//********************/
		LPSpriteContainerAnimationArray	m_pAnimation;
		/*******************//*!
		アニメーション管理
		*//********************/
		LPSpritePartMotionController	m_pMotionController;
		/*******************//*!
		パーツ配列<br>
		内部パーツのレンダリング用ソートなどのために、<br>
		ツリー管理のデータをリストに展開する。
		*//********************/
		LPSprite2DPartArray				m_pPartArray;
		
		/*************************************************************************//*!
				@brief			描画用配列作成(内部再帰用関数)
				@param[in]		pPart		設定パーツ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool CreateRenderArray(LPSprite2DPart pPart);
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CSprite2DContainer();
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーテクスチャ

				@return			None
		*//**************************************************************************/
		CSprite2DContainer(const CSprite2DContainer& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CSprite2DContainer();
		
		/*************************************************************************//*!
				@brief			スプライトの読み込み
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			スプライトの読み込み
				@param[in]		pName		名前
				@param[in]		pData		メモリアドレス
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Load(LPCMofChar pName,LPMofVoid pData,MofU32 Size);
		/*************************************************************************//*!
				@brief			描画用配列作成
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool CreateRenderArray(void);
		
		/*************************************************************************//*!
				@brief			テクスチャのコピー生成
				@param			None
				
				@return			作成されたコピーテクスチャ<br>
								作成に失敗した場合NULLを返す
		*//**************************************************************************/
		virtual ISprite* CreateCopyObject(void) const;

		/*************************************************************************//*!
				@brief			スプライトの更新
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Update(void);
		/*************************************************************************//*!
				@brief			スプライトの更新
				@param[in]		t			更新時間

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Update(MofFloat t);
		
		/*************************************************************************//*!
				@brief			現在のモーションを変更
				@param[in]		n				モーション番号
				@param[in]		bSame			同一モーションでの更新フラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool ChangeMotion(MofU32 n,MofBool bSame = TRUE);
		/*************************************************************************//*!
				@brief			現在のモーションを変更
				@param[in]		str				モーション名
				@param[in]		bSame			同一モーションでの更新フラグ
				
				@return			TRUE			成功<br>
								それ以外		失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool ChangeMotionByName(LPCMofChar str,MofBool bSame = TRUE);

		/*************************************************************************//*!
				@brief			スプライトの描画
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Render(void);
		
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		/*************************************************************************//*!
				@brief			現在のモーションが終了しているかを判定する。<br>
								モーションがループする場合はTRUEになることはない
				@param			None
				
				@return			TRUE			終了済み<br>
								FALE			まだ終了していない
		*//**************************************************************************/
		MofBool IsEndMotion(void);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			時間を設定する
				@param[in]		t				内部アニメーション時間
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetTime(MofFloat t);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			テクスチャ配列取得
				@param			None

				@return			テクスチャ配列
		*//**************************************************************************/
		virtual LPTextureArray GetTextureArray(void);
		/*************************************************************************//*!
				@brief			スプライトアニメーションリスト取得
				@param			None

				@return			スプライトアニメーションリスト
		*//**************************************************************************/
		virtual LPSpriteContainerAnimationArray GetAnimation(void);
		/*************************************************************************//*!
				@brief			スプライトアニメーションコントローラー取得
				@param			None

				@return			スプライトアニメーションコントローラー
		*//**************************************************************************/
		virtual LPSpritePartMotionController GetMotionController(void);

		//クラス基本定義
		MOF_LIBRARYCLASS(CSprite2DContainer,MOF_SPRITE2DCONTAINERCLASS_ID);
	};

	#include	"Sprite2DContainer.inl"

	//ポインタ置き換え
	typedef CSprite2DContainer*			LPSprite2DContainer;
}

#endif

//[EOF]