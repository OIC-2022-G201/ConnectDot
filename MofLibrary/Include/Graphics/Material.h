/*************************************************************************//*!
					
					@file	Material.h
					@brief	マテリアル基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__MATERIAL__H__

#define		__MATERIAL__H__

//INCLUDE
#include	"Shader.h"

namespace Mof {
	
	/*******************************//*!
	@brief	マテリアル構造体

			マテリアルの設定値をまとめた構造体。

	@author	CDW
	*//********************************/
	typedef struct MOFLIBRARY_API tag_MATERIALPARAMETER {
		/*******************//*!
		名前
		*//********************/
		CString						Name;
		/*******************//*!
		ディフューズ
		*//********************/
		CVector4					Diffuse;
		/*******************//*!
		アンビエント
		*//********************/
		CVector4					Ambient;
		/*******************//*!
		スペキュラ
		*//********************/
		CVector4					Speculer;
		/*******************//*!
		エミッシブ
		*//********************/
		CVector4					Emissive;
		/*******************//*!
		スペキュラ強度
		*//********************/
		MofFloat					Power;
		/*******************//*!
		ブレンディング
		*//********************/
		Blending					Blend;
		/*******************//*!
		テクスチャリスト
		*//********************/
		LPTextureArray				pTextureArray;
		
		/*************************************************************************//*!
				@brief			コンストラクタ<br>
								全てのパラメーターをデフォルトで作成する。
				@param			None

				@return			None
		*//**************************************************************************/
		tag_MATERIALPARAMETER() :
		Name() ,
		Diffuse(1.0f,1.0f,1.0f,1.0f) ,
		Ambient(0.0f,0.0f,0.0f,1.0f) ,
		Speculer(1.0f,1.0f,1.0f,1.0f) ,
		Emissive(0.0f,0.0f,0.0f,1.0f) ,
		Power(10.0f) ,
		Blend(BLEND_USER) ,
		pTextureArray(NULL) {
			pTextureArray = new CTextureArray();
		}
		
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj			コピーマテリアル

				@return			None
		*//**************************************************************************/
		tag_MATERIALPARAMETER(const tag_MATERIALPARAMETER& pObj) :
		Name(pObj.Name) ,
		Diffuse(pObj.Diffuse) ,
		Ambient(pObj.Ambient) ,
		Speculer(pObj.Speculer) ,
		Emissive(pObj.Emissive) ,
		Power(pObj.Power) ,
		Blend(pObj.Blend) ,
		pTextureArray(NULL) {
			if(pObj.pTextureArray)
			{
				pTextureArray = new CTextureArray(*pObj.pTextureArray);
			}
		}
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~tag_MATERIALPARAMETER(){
			Name.SetString(NULL);
			MOF_SAFE_DELETE(pTextureArray);
		}
	}MaterialParameter,*LPMaterialParameter;

	/*******************************//*!
	@brief	マテリアルインターフェイス

			マテリアルの読み込み、設定を行うためのインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IMaterial : public IMofNamedObject , public IMofCopyObject< IMaterial > {
	protected:
	public:
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ディフューズ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetDiffuse(const Vector4& c) = 0;
		/*************************************************************************//*!
				@brief			ディフューズ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetDiffuse(const MofU32 c) = 0;
		/*************************************************************************//*!
				@brief			アンビエント色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetAmbient(const Vector4& c) = 0;
		/*************************************************************************//*!
				@brief			アンビエント色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetAmbient(const MofU32 c) = 0;
		/*************************************************************************//*!
				@brief			スペキュラ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetSpeculer(const Vector4& c) = 0;
		/*************************************************************************//*!
				@brief			スペキュラ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetSpeculer(const MofU32 c) = 0;
		/*************************************************************************//*!
				@brief			エミッシブ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetEmissive(const Vector4& c) = 0;
		/*************************************************************************//*!
				@brief			エミッシブ色設定
				@param[in]		c			色
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetEmissive(const MofU32 c) = 0;
		/*************************************************************************//*!
				@brief			スペキュラ強度設定
				@param			pow			強度
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetPower(MofFloat pow) = 0;
		/*************************************************************************//*!
				@brief			ブレンディング設定
				@param			bld			ブレンディング
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetBlending(Blending bld) = 0;
		/*************************************************************************//*!
				@brief			テクスチャ設定
				@param			pTex		テクスチャ
				@param			n			番号
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool SetTexture(LPTexture pTex,MofU32 n) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ディフューズ色取得
				@param			None

				@return			ディフューズ色
		*//**************************************************************************/
		virtual CVector4& GetDiffuse(void) = 0;
		/*************************************************************************//*!
				@brief			ディフューズ色取得
				@param			None

				@return			ディフューズ色
		*//**************************************************************************/
		virtual const CVector4& GetDiffuse(void) const = 0;
		/*************************************************************************//*!
				@brief			ディフューズ色取得
				@param			None

				@return			ディフューズ色
		*//**************************************************************************/
		virtual MofU32 GetDiffuseU32(void) const = 0;
		/*************************************************************************//*!
				@brief			アンビエント色取得
				@param			None

				@return			アンビエント色
		*//**************************************************************************/
		virtual CVector4& GetAmbient(void) = 0;
		/*************************************************************************//*!
				@brief			アンビエント色取得
				@param			None

				@return			アンビエント色
		*//**************************************************************************/
		virtual const CVector4& GetAmbient(void) const = 0;
		/*************************************************************************//*!
				@brief			アンビエント色取得
				@param			None

				@return			アンビエント色
		*//**************************************************************************/
		virtual MofU32 GetAmbientU32(void) const = 0;
		/*************************************************************************//*!
				@brief			スペキュラ色取得
				@param			None

				@return			スペキュラ色
		*//**************************************************************************/
		virtual CVector4& GetSpeculer(void) = 0;
		/*************************************************************************//*!
				@brief			スペキュラ色取得
				@param			None

				@return			スペキュラ色
		*//**************************************************************************/
		virtual const CVector4& GetSpeculer(void) const = 0;
		/*************************************************************************//*!
				@brief			スペキュラ色取得
				@param			None

				@return			スペキュラ色
		*//**************************************************************************/
		virtual MofU32 GetSpeculerU32(void) const = 0;
		/*************************************************************************//*!
				@brief			エミッシブ色取得
				@param			None

				@return			エミッシブ色
		*//**************************************************************************/
		virtual CVector4& GetEmissive(void) = 0;
		/*************************************************************************//*!
				@brief			エミッシブ色取得
				@param			None

				@return			エミッシブ色
		*//**************************************************************************/
		virtual const CVector4& GetEmissive(void) const = 0;
		/*************************************************************************//*!
				@brief			エミッシブ色取得
				@param			None

				@return			エミッシブ色
		*//**************************************************************************/
		virtual MofU32 GetEmissiveU32(void) const = 0;
		/*************************************************************************//*!
				@brief			スペキュラ強度取得
				@param			None

				@return			スペキュラ強度
		*//**************************************************************************/
		virtual MofFloat GetPower(void) const = 0;
		/*************************************************************************//*!
				@brief			ブレンディング取得
				@param			None

				@return			ブレンディング
		*//**************************************************************************/
		virtual Blending GetBlending(void) const = 0;
		/*************************************************************************//*!
				@brief			テクスチャ配列取得
				@param			None

				@return			テクスチャ配列
		*//**************************************************************************/
		virtual LPTextureArray GetTextureArray(void) = 0;
		/*************************************************************************//*!
				@brief			テクスチャ取得
				@param			n			番号
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual LPTexture GetTexture(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			テクスチャ取得
				@param			n			番号

				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual const LPTexture GetTexture(MofU32 n) const = 0;
	};

	//ポインタ置き換え
	typedef IMaterial*			LPMaterial;
}

#endif

//[EOF]