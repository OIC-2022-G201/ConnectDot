/*************************************************************************//*!
					
					@file	MeshBlock.h
					@brief	メッシュ基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__MESHBLOCK__H__

#define		__MESHBLOCK__H__

//INCLUDE
#include	"Geometry.h"

namespace Mof {
	
	/*******************************//*!
	@brief	メッシュインターフェイス

			メッシュインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IGeometryBlock : public IMofNamedObject, public IMofCopyObject< IGeometryBlock > {
	private:
	public:
		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			インデックスバッファ取得
				@param			None

				@return			インデックスバッファの取得
		*//**************************************************************************/
		virtual LPIndexBuffer GetIndexBuffer(void) = 0;
		
	};

	//ポインタ置き換え
	typedef IGeometryBlock*				LPGeometryBlock;
	typedef CDynamicArray< LPGeometryBlock >		CGeometryBlockArray, *LPGeometryBlockArray;
	
	/*******************************//*!
	@brief	メッシュクラス

			メッシュクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CGeometryBlock : public IGeometryBlock {
	private:
		/*******************//*!
		対応ジオメトリ
		*//********************/
		LPGeometry			m_pGeometry;
		/*******************//*!
		インデックスバッファ
		*//********************/
		LPIndexBuffer		m_pIndexBuffer;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		box				範囲用AABB
				@param[in]		pGeom			対応ジオメトリ

				@return			None
		*//**************************************************************************/
		CGeometryBlock(CBoxAABB& box, LPGeometry pGeom);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピージオメトリ

				@return			None
		*//**************************************************************************/
		CGeometryBlock(const CGeometryBlock& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CGeometryBlock();
		
		/*************************************************************************//*!
				@brief			コピー生成
				@param			None
				
				@return			作成されたコピー<br>
								作成に失敗した場合NULLを返す
		*//**************************************************************************/
		IGeometryBlock* CreateCopyObject(void) const;

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			インデックスバッファ取得
				@param			None

				@return			インデックスバッファの取得
		*//**************************************************************************/
		virtual LPIndexBuffer GetIndexBuffer(void);

		//クラス基本定義
		MOF_LIBRARYCLASS(CGeometryBlock, MOF_TEMPORARYCLASS_ID);
	};

	/*******************************//*!
	@brief	メッシュインターフェイス

			メッシュインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IMeshBlock : public IMofNamedObject, public IMofCopyObject< IMeshBlock > {
	private:
	public:
		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ブロック配列取得
				@param			None

				@return			ブロック配列の取得
		*//**************************************************************************/
		virtual LPGeometryBlockArray GetBlockArray(void) = 0;
	};

	//ポインタ置き換え
	typedef IMeshBlock*				LPMeshBlock;
	typedef CDynamicArray< LPMeshBlock >		CMeshBlockArray, *LPMeshBlockArray;
	
	/*******************************//*!
	@brief	メッシュクラス

			メッシュクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CMeshBlock : public IMeshBlock {
	private:
		/*******************//*!
		名前
		*//********************/
		CString						m_Name;
		/*******************//*!
		対応ボックス
		*//********************/
		CBoxAABB					m_BlockAABB;
		/*******************//*!
		対応ジオメトリ
		*//********************/
		LPGeometryBlockArray		m_pGeometryArray;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		box				範囲用AABB
				@param[in]		pName			名前
				@param[in]		pGeom			対応ジオメトリ

				@return			None
		*//**************************************************************************/
		CMeshBlock(CBoxAABB& box, LPCMofChar pName, LPGeometryArray pGeom);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピージオメトリ

				@return			None
		*//**************************************************************************/
		CMeshBlock(const CMeshBlock& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CMeshBlock();
		
		/*************************************************************************//*!
				@brief			コピー生成
				@param			None
				
				@return			作成されたコピー<br>
								作成に失敗した場合NULLを返す
		*//**************************************************************************/
		IMeshBlock* CreateCopyObject(void) const;

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			ブロック配列取得
				@param			None

				@return			ブロック配列の取得
		*//**************************************************************************/
		virtual LPGeometryBlockArray GetBlockArray(void);

		//クラス基本定義
		MOF_LIBRARYCLASS(CMeshBlock, MOF_TEMPORARYCLASS_ID);
	};

	/*******************************//*!
	@brief	メッシュブロック情報

			メッシュブロック情報。

	@author	CDW
	*//********************************/
	typedef struct tag_BLOCKPARAMETER {
		CBoxAABB						ModelBox;									//!<モデル箱
		CVector3						InverseSize;								//!<サイズ逆数
		CVector3						OffsetPosition;								//!<オフセット位置
		MofU16							XCount;										//!<Xの数
		MofU16							YCount;										//!<Yの数
		MofU16							ZCount;										//!<Zの数
	}BLOCKPARAMETER, *LPBLOCKPARAMETER;
	
	/*******************************//*!
	@brief	メッシュインターフェイス

			メッシュインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IBlockContainer : public IMofObject, public IMofCopyObject< IBlockContainer > {
	private:
	public:
		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			パラメーター取得
				@param			None

				@return			パラメーターの取得
		*//**************************************************************************/
		virtual LPBLOCKPARAMETER GetParameter(void) = 0;
		/*************************************************************************//*!
				@brief			ブロック配列取得
				@param			None

				@return			ブロック配列の取得
		*//**************************************************************************/
		virtual LPMeshBlockArray GetBlockArray(void) = 0;
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		v				ブロック座標
				@param[out]		ox				ブロックＸ番号
				@param[out]		oy				ブロックＹ番号
				@param[out]		oy				ブロックＺ番号
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool GetBlockPos(Vector3& v, MofU16* ox, MofU16* oy, MofU16* oz) = 0;
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		x				ブロックＸ番号
				@param[in]		y				ブロックＹ番号
				@param[in]		y				ブロックＺ番号
				
				@return			座標のブロック番号
		*//**************************************************************************/
		virtual MofU32 GetBlockNo(MofU16 x, MofU16 y, MofU16 z) = 0;
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		v				ブロック座標
				
				@return			座標のブロック番号
		*//**************************************************************************/
		virtual MofU32 GetBlockNo(Vector3& v) = 0;
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		No				ブロック番号
				
				@return			ブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(MofU32 No) = 0;
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		x				ブロックＸ番号
				@param[in]		y				ブロックＹ番号
				@param[in]		y				ブロックＺ番号
				
				@return			座標のブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(MofU16 x, MofU16 y, MofU16 z) = 0;
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		v				ブロック座標
				
				@return			座標のブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(Vector3& v) = 0;
	};

	//ポインタ置き換え
	typedef IBlockContainer*				LPBlockContainer;
	
	/*******************************//*!
	@brief	メッシュインターフェイス

			メッシュインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CBlockContainer : public IBlockContainer {
	private:
		/*******************//*!
		設定パラメーター
		*//********************/
		BLOCKPARAMETER				m_Parameter;
		/*******************//*!
		作成ブロック
		*//********************/
		LPMeshBlockArray			m_pMeshBlock;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CBlockContainer();
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピージオメトリ

				@return			None
		*//**************************************************************************/
		CBlockContainer(const CBlockContainer& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CBlockContainer();

		/*************************************************************************//*!
				@brief			コピー生成
				@param			None
				
				@return			作成されたコピー<br>
								作成に失敗した場合NULLを返す
		*//**************************************************************************/
		IBlockContainer* CreateCopyObject(void) const;

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			パラメーター取得
				@param			None

				@return			パラメーターの取得
		*//**************************************************************************/
		virtual LPBLOCKPARAMETER GetParameter(void);
		/*************************************************************************//*!
				@brief			ブロック配列取得
				@param			None

				@return			ブロック配列の取得
		*//**************************************************************************/
		virtual LPMeshBlockArray GetBlockArray(void);
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		v				ブロック座標
				@param[out]		ox				ブロックＸ番号
				@param[out]		oy				ブロックＹ番号
				@param[out]		oy				ブロックＺ番号
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool GetBlockPos(Vector3& v, MofU16* ox, MofU16* oy, MofU16* oz);
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		x				ブロックＸ番号
				@param[in]		y				ブロックＹ番号
				@param[in]		y				ブロックＺ番号
				
				@return			座標のブロック番号
		*//**************************************************************************/
		virtual MofU32 GetBlockNo(MofU16 x, MofU16 y, MofU16 z);
		/*************************************************************************//*!
				@brief			ブロック番号取得
				@param[in]		v				ブロック座標
				
				@return			座標のブロック番号
		*//**************************************************************************/
		virtual MofU32 GetBlockNo(Vector3& v);
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		No				ブロック番号
				
				@return			ブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(MofU32 No);
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		x				ブロックＸ番号
				@param[in]		y				ブロックＹ番号
				@param[in]		y				ブロックＺ番号
				
				@return			座標のブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(MofU16 x, MofU16 y, MofU16 z);
		/*************************************************************************//*!
				@brief			ブロック取得
				@param[in]		v				ブロック座標
				
				@return			座標のブロック
		*//**************************************************************************/
		virtual LPMeshBlock GetBlock(Vector3& v);

		//クラス基本定義
		MOF_LIBRARYCLASS(CBlockContainer, MOF_TEMPORARYCLASS_ID);
	};

	#include	"MeshBlock.inl"
}

#endif	//__MESHBLOCK__H__

//[EOF]