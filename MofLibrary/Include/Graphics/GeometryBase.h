/*************************************************************************//*!
					
					@file	GeometryBase.h
					@brief	ジオメトリ基底クラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__GEOMETRYBASE__H__

#define		__GEOMETRYBASE__H__

//INCLUDE
#include	"Geometry.h"
#include	"GeometryMorphingBase.h"

namespace Mof {
	
	/*******************************//*!
	@brief	ジオメトリ基底クラス

			ジオメトリ基底となるクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CGeometryBase : public IGeometry {
	protected:
		/*******************//*!
		名前
		*//********************/
		CString						m_Name;
		/*******************//*!
		行列
		*//********************/
		CMatrix44					m_Matrix;
		/*******************//*!
		描画方式
		*//********************/
		PrimitiveTopology			m_Topology;
		/*******************//*!
		頂点バッファ
		*//********************/
		LPVertexBuffer				m_pVertexBuffer;
		/*******************//*!
		インデックスバッファ
		*//********************/
		LPIndexBuffer				m_pIndexBuffer;
		/*******************//*!
		マテリアル
		*//********************/
		LPMaterial					m_pMaterial;
		/*******************//*!
		モーフィング
		*//********************/
		LPGeometryMorphingArray		m_pMorphing;
		/*******************//*!
		対応ボーン名
		*//********************/
		LPStringArray				m_pBoneName;
		/*******************//*!
		当たり判定用キャッシュ
		*//********************/
		LPGeometryCollisionCache	m_pCollisionCache;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CGeometryBase();
		/*************************************************************************//*!
				@brief			バッファ指定コンストラクタ
				@param[in]		pName		名前
				@param[in]		Topology	描画方式
				@param[in]		pVBuff		頂点バッファ
				@param[in]		pIBuff		インデックスバッファ
				@param[in]		pMaterial	マテリアル

				@return			None
		*//**************************************************************************/
		CGeometryBase(LPCMofChar pName,PrimitiveTopology Topology,LPVertexBuffer pVBuff,LPIndexBuffer pIBuff,LPMaterial pMaterial);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピージオメトリ

				@return			None
		*//**************************************************************************/
		CGeometryBase(const CGeometryBase& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CGeometryBase();
		
		/*************************************************************************//*!
				@brief			バッファの作成<br>
								ジオメトリ内部で登録されている、頂点バッファやインデックスバッファの生成をおこなう。<br>
								ジオメトリの頂点やインデックスの情報を変更した場合に実行する必要がある。
				@param			None
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CreateBuffer(void);
		
		/*************************************************************************//*!
				@brief			最大・最小計算<br>
								ジオメトリに含まれる頂点の最大位置と最小位置を求める。
				@param[out]		minv			出力用最小
				@param[out]		maxv			出力用最大
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateMinMax(Vector3& minv,Vector3& maxv);
		/*************************************************************************//*!
				@brief			指定ボーン名にウェイトを割り付けている、最大・最小座標計算
				@param[in]		pBName			ボーン名
				@param[out]		minv			出力用最小
				@param[out]		maxv			出力用最大
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateMinMax(LPCMofChar pBName, Vector3& minv, Vector3& maxv);

		/*************************************************************************//*!
				@brief			AABB計算<br>
								ジオメトリに含まれる頂点の境界ボックスを求める。
				@param[out]		aabb			出力用ボックス
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateAABB(BoxAABB& aabb);
		/*************************************************************************//*!
				@brief			指定ボーン名にウェイトを割り付けている、AABB計算
				@param[in]		pBName			ボーン名
				@param[out]		aabb			出力用ボックス
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateAABB(LPCMofChar pBName, BoxAABB& aabb);
		/*************************************************************************//*!
				@brief			境界球計算
				@param[out]		sph				出力用球
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateSphere(Sphere& sph);
		/*************************************************************************//*!
				@brief			指定ボーン名にウェイトを割り付けている、境界球計算
				@param[in]		pBName			ボーン名
				@param[out]		sph				出力用球
				
				@return			TRUE			正常終了<br>
								それ以外		エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool CalculateSphere(LPCMofChar pBName, Sphere& sph);

		/*************************************************************************//*!
				@brief			基本描画<br>
								バッファの設定と、描画のコールのみを行う。<br>
								マテリアルの設定など、シェーダーの設定は呼び出し前に行っておくこと。
				@param			None
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(void) = 0;
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat);
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat,const Vector4& col);
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				@param[in]		uv				UV補正
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat,const Vector4& col,const Vector2& uv);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				@param[in]		col				色補正
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion,const Vector4& col);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				@param[in]		col				色補正
				@param[in]		uv				UV補正
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion,const Vector4& col,const Vector2& uv);
		
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat, LPShader pShader, LPShaderBind pShaderBind);
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat, const Vector4& col, LPShader pShader, LPShaderBind pShaderBind);
		/*************************************************************************//*!
				@brief			基本描画
				@param[in]		wMat			変換行列
				@param[in]		col				色補正
				@param[in]		uv				UV補正
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(const Matrix44& wMat, const Vector4& col, const Vector2& uv, LPShader pShader, LPShaderBind pShaderBind);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion, LPShader pShader, LPShaderBind pShaderBind);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				@param[in]		col				色補正
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion, const Vector4& col, LPShader pShader, LPShaderBind pShaderBind);
		/*************************************************************************//*!
				@brief			アニメーション描画
				@param[in]		pMotion			モーションコントローラ
				@param[in]		col				色補正
				@param[in]		uv				UV補正
				@param[in]		pShader			シェーダー
				@param[in]		pShaderBind		シェーダーバインド
				
				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Render(LPMeshMotionController pMotion, const Vector4& col, const Vector2& uv, LPShader pShader, LPShaderBind pShaderBind);


		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			変換行列設定
				@param[in]		mat				設定する変換行列
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetMatrix(CMatrix44& mat);
		/*************************************************************************//*!
				@brief			描画方式設定
				@param[in]		Topology		描画方式
				
				@return			TRUE			正常終了<br>
								それ以外		エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetTopology(PrimitiveTopology Topology);
		/*************************************************************************//*!
				@brief			頂点バッファ設定
				@param[in]		pBuff			設定バッファ
				
				@return			TRUE			正常終了<br>
								それ以外		エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetVertexBuffer(LPVertexBuffer pBuff);
		/*************************************************************************//*!
				@brief			インデックスバッファ設定
				@param[in]		pBuff			設定バッファ
				
				@return			TRUE			正常終了<br>
								それ以外		エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetIndexBuffer(LPIndexBuffer pBuff);
		/*************************************************************************//*!
				@brief			マテリアル設定
				@param[in]		pMat			設定マテリアル
				
				@return			TRUE			正常終了<br>
								それ以外		エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetMaterial(LPMaterial pMat);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			変換行列取得
				@param			None

				@return			変換行列の取得
		*//**************************************************************************/
		virtual CMatrix44& GetMatrix(void);
		/*************************************************************************//*!
				@brief			頂点バッファ取得
				@param			None

				@return			頂点バッファ
		*//**************************************************************************/
		virtual LPVertexBuffer GetVertexBuffer(void);
		/*************************************************************************//*!
				@brief			頂点バッファ取得
				@param[in,out]	pOut			頂点バッファ配列<br>
												出力用のポインタがNULLなら格納されない。
				@param[in,out]	cnt				頂点バッファの数<br>
												実行時にはpOutの格納最大数を指定する。

				@return			TRUE			正常終了<br>
								それ以外		エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool GetVertexBuffer(LPVertexBuffer* pOut,MofU32& cnt);
		/*************************************************************************//*!
				@brief			頂点バッファフラグ取得
				@param			None

				@return			頂点バッファフラグ
		*//**************************************************************************/
		virtual VertexFlag GetVertexFlag(void);
		/*************************************************************************//*!
				@brief			インデックスバッファ取得
				@param			None

				@return			インデックスバッファ
		*//**************************************************************************/
		virtual LPIndexBuffer GetIndexBuffer(void);
		/*************************************************************************//*!
				@brief			マテリアル取得
				@param			None

				@return			マテリアル
		*//**************************************************************************/
		virtual LPMaterial GetMaterial(void);
		/*************************************************************************//*!
				@brief			モーフィング取得
				@param			None

				@return			モーフィング
		*//**************************************************************************/
		virtual LPGeometryMorphingArray GetMorphing(void);
		/*************************************************************************//*!
				@brief			対応ボーン名リスト取得
				@param			None

				@return			対応ボーン名リスト
		*//**************************************************************************/
		virtual LPStringArray GetBoneNameArray(void);
		/*************************************************************************//*!
				@brief			当たり判定用キャッシュ取得<br>
								当たり判定用のキャッシュが存在しない場合は新規に生成をおこなう
				@param			None

				@return			当たり判定用キャッシュ
		*//**************************************************************************/
		virtual LPGeometryCollisionCache GetCollisionCache(void);
	};

	#include	"GeometryBase.inl"
}

#endif

//[EOF]