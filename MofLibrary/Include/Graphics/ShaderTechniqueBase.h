/*************************************************************************//*!
					
					@file	ShaderTechniqueBase.h
					@brief	シェーダーテクニック基底クラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SHADERTECHNIQUEBASE__H__

#define		__SHADERTECHNIQUEBASE__H__


//INCLUDE
#include	"ShaderTechnique.h"

namespace Mof {
	
	/*******************************//*!
	@brief	シェーダーテクニッククラス

			シェーダーのテクニック設定を行うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CShaderTechniqueBase : public IShaderTechnique {
	protected:
		/*******************//*!
		名前
		*//********************/
		CString						m_Name;
		/*******************//*!
		パス配列
		*//********************/
		LPShaderPassArray			m_pPassArray;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CShaderTechniqueBase();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		テクニック名
				@param[in]		pc			パスカウント

				@return			None
		*//**************************************************************************/
		CShaderTechniqueBase(LPCMofChar pName,const MofU32 pc);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピーシェーダー

				@return			None
		*//**************************************************************************/
		CShaderTechniqueBase(const CShaderTechniqueBase& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CShaderTechniqueBase();
		
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			パスの数取得
				@param			None

				@return			パスの数
		*//**************************************************************************/
		virtual MofU32 GetPassCount(void) const;
		/*************************************************************************//*!
				@brief			パスの取得
				@param[in]		n			パス番号

				@return			パス
		*//**************************************************************************/
		virtual LPShaderPass GetPass(MofU32 n);
	};

	#include	"ShaderTechniqueBase.inl"

}

#endif

//[EOF]