/*************************************************************************//*!
					
					@file	WriteChunkFile.h
					@brief	チャンク管理を行うファイル書き込みクラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__WRITECHUNKFILE__H__

#define		__WRITECHUNKFILE__H__

//INCLUDE
#include	"WriteFile.h"

//DEFINE

//!独自ファイルチャンクスタック最大数
#define		MOFCHUNK_FILE_CHUNKSTACKMAX			20
	
//!独自ファイルチャンクサイズ
#define		MOFCHUNK_FILE_CHUNKSIZE				(sizeof(MofU32) * 3)

//!独自ファイルチャンク終端
#define		MOFCHUNK_FILE_CHUNKEND				0xFFFFFFFF

namespace Mof {
	
	/*******************************//*!
	@brief	Ｘファイル変換クラス

			テキスト形式のＸファイルの変換を行うためのクラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CWriteChunkFile : public CWriteBinaryFile {
	protected:
		/*******************//*!
		書き込み用チャンクブロックサイズ
		*//********************/
		MofU32					m_BlockSize;
		/*******************//*!
		書き込み用チャンクデータ
		*//********************/
		LPMofU8					m_pWriteData;
		/*******************//*!
		書き込み用チャンクデータ位置
		*//********************/
		MofU32					m_WriteDataOffset;
		/*******************//*!
		書き込み用チャンクデータサイズ
		*//********************/
		MofU32					m_WriteDataSize;
		/*******************//*!
		書き込み用チャンクデータスタック
		*//********************/
		MofU32					m_ChunkStack;
		/*******************//*!
		書き込み用チャンクデータオフセット
		*//********************/
		MofU32					m_ChunkOffset[MOFCHUNK_FILE_CHUNKSTACKMAX];
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CWriteChunkFile();
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CWriteChunkFile();
		
		/*************************************************************************//*!
				@brief			書き込みデータを追加する
				@param[in]		pBuffer		追加データ
				@param[in]		BufSize		追加サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool PushWriteData(LPCMofVoid pBuffer,MofU32 BufSize);
		/*************************************************************************//*!
				@brief			書き込みデータを追加する
				@param[in]		pVec		追加データ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool PushWriteVector3(Vector3* pVec);
		/*************************************************************************//*!
				@brief			書き込みデータを追加する
				@param[in]		pVec		追加データ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool PushWriteVector4(Vector4* pVec);
		/*************************************************************************//*!
				@brief			書き込みチャンクを追加する
				@param[in]		ck			チャンク
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool PushChunkData(MofU32 ck);
		/*************************************************************************//*!
				@brief			書き込みチャンクを減らす
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool PushChunkEnd(void);
		/*************************************************************************//*!
				@brief			書き込みデータをファイルに書き込む
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		MofBool WriteData(void);

		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		/*************************************************************************//*!
				@brief			ブロックサイズ設定
				@param[in]		bs				ブロックサイズ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetBlockSize(MofU32 bs);
		/*************************************************************************//*!
				@brief			ブロックサイズ取得
				@param			None

				@return			ブロックサイズ
		*//**************************************************************************/
		virtual MofU32 GetBlockSize(void);

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTCOPY(CWriteChunkFile,MOF_CONVERTXCLASS_ID);
	};

	//INLINE INCLUDE
	#include	"WriteChunkFile.inl"

}

#endif	//__CONVERTXFILE__H__

//[EOF]