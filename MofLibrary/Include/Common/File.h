/*************************************************************************//*!
					
					@file	File.h
					@brief	ファイル入出力を取り扱う基底インターフェイス

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__FILE__H__

#define		__FILE__H__

//INCLUDE
#include	"String.h"
#include	"DecryptFile.h"
#include	"EncryptFile.h"
#include	"../Math/Quaternion.h"
#include	"../Collision/Rectangle.h"
#include	"../Collision/Circle.h"

namespace Mof {
	
	/*******************************//*!
	@brief	ファイルシーク用基準位置列挙

			ファイルクラスにおいてSeekを行う際の基準位置の列挙

	@author	CDW
	*//********************************/
	typedef enum FileSeekOrigin {
		FILESEEK_START,								//!<先頭
		FILESEEK_NOW,								//!<現在位置
		FILESEEK_END,								//!<終端
	}FileSeekOrigin;

	/*******************************//*!
	@brief	ファイル入出力基底インターフェイス

			ファイル入出力を取り扱う基底インターフェイス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IFile : public IMofNamedObject {
	protected:
	public:
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName) = 0;
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size) = 0;
		
		/*************************************************************************//*!
				@brief			ファイルのオフセット移動
				@param[in]		Point		シーク位置
				@param[in]		SeekType	シーク基準位置
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Seek(MofS32 Point,FileSeekOrigin SeekType) = 0;
		
		/*************************************************************************//*!
				@brief			ファイルオフセットを取得する
				@param			None
				
				@return			ファイルオフセット
		*//**************************************************************************/
		virtual MofS32 Tell(void) = 0;

		/*************************************************************************//*!
				@brief			ファイルを閉じる
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Close(void) = 0;
		
		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ファイルバッファサイズ取得
				@param			None

				@return			ファイルバッファサイズの取得
		*//**************************************************************************/
		virtual MofU32 GetBufferSize(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルバッファ参照オフセット取得
				@param			None

				@return			ファイルバッファ参照オフセットの取得
		*//**************************************************************************/
		virtual MofU32 GetOffset(void) = 0;
	};
	
	/*******************************//*!
	@brief	ファイル入力基底インターフェイス

			ファイル入力を取り扱う基底インターフェイス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IReadFile : public IFile {
	protected:
	public:
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName) = 0;
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName, LPDecryptFile pDec) = 0;
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size) = 0;
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size, LPDecryptFile pDec) = 0;

		/*************************************************************************//*!
				@brief			ファイルから読みこむ
				@param[out]		pData		読み込みデータ格納ポインタ
				@param[in]		Size		読み込みデータサイズ
				
				@return			読み込んだデータサイズ<br>
								-1の場合読み込みエラー
		*//**************************************************************************/
		virtual MofS32 Read(LPMofVoid pData,MofU32 Size) = 0;
		/*************************************************************************//*!
				@brief			ファイルから読みこむ
				@param[out]		pData		読み込みデータ格納ポインタ
				@param[in]		Size		読み込みデータサイズ
				@param[in]		Num			読み込みデータ数
				
				@return			読み込んだデータサイズ<br>
								-1の場合読み込みエラー
		*//**************************************************************************/
		virtual MofS32 Read(LPMofVoid pData,MofU32 Size,MofU32 Num) = 0;

		/*************************************************************************//*!
				@brief			ファイルからS8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS8型データ
		*//**************************************************************************/
		virtual MofS8 ReadS8(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからU8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU8型データ
		*//**************************************************************************/
		virtual MofU8 ReadU8(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからS16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS16型データ
		*//**************************************************************************/
		virtual MofS16 ReadS16(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからU16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU16型データ
		*//**************************************************************************/
		virtual MofU16 ReadU16(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからS32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS32型データ
		*//**************************************************************************/
		virtual MofS32 ReadS32(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからU32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU32型データ
		*//**************************************************************************/
		virtual MofU32 ReadU32(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからFloat型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだFloat型データ
		*//**************************************************************************/
		virtual MofFloat ReadFloat(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルからDouble型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだDouble型データ
		*//**************************************************************************/
		virtual MofDouble ReadDouble(void) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar Tok) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar STok,const MofChar ETok) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,LPCMofChar pTok,MofU32 TokCnt) = 0;
		
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar Tok) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar STok,const MofChar ETok) = 0;
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,LPCMofChar pTok,MofU32 TokCnt) = 0;

		/*************************************************************************//*!
				@brief			ファイルからVector2型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,yの順で格納されていること
				@param[out]		v			Vector2
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadVector2(Vector2& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルからVector3型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,zの順で格納されていること
				@param[out]		v			Vector3
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadVector3(Vector3& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルからVector4型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,z,wの順で格納されていること
				@param[out]		v			Vector4
				
				@return			読み込んだVector4型データ
		*//**************************************************************************/
		virtual MofBool ReadVector4(Vector4& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルからQuaternion型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でw,x,y,zの順で格納されていること
				@param[out]		q			Quaternion
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadQuaternion(Quaternion& q) = 0;
		/*************************************************************************//*!
				@brief			ファイルからRectangle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でLeft,Top,Right,Bottomの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadRectangle(Rectangle& r) = 0;
		/*************************************************************************//*!
				@brief			ファイルからCircle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,rの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadCircle(Circle& r) = 0;
		/*************************************************************************//*!
				@brief			ファイルからMatrix33型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型で_11,_12,_13,_21,_22,_23,_31,_32,_33の順で格納されていること
				@param[out]		m			Matrix33
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadMatrix33(Matrix33& m) = 0;
		/*************************************************************************//*!
				@brief			ファイルからMatrix44型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型で_11,_12,_13,_14,_21,_22,_23,_24,_31,_32,_33,_34,_41,_42,_43,_44の順で格納されていること
				@param[out]		m			Matrix44
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadMatrix44(Matrix44& m) = 0;
		
		/*************************************************************************//*!
				@brief			ファイルオフセット位置がバッファの終端を超えているか判定
				@param			None
				
				@return			TRUE		指し示す位置は終端
								FALSE		まだ存在する
		*//**************************************************************************/
		virtual MofBool IsEOF(void) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ファイルバッファ取得
				@param			None

				@return			ファイルバッファの取得
		*//**************************************************************************/
		virtual LPMofU8 GetBuffer(void) = 0;
		/*************************************************************************//*!
				@brief			オフセット位置のファイルバッファ取得
				@param			None

				@return			オフセット位置のファイルバッファの取得
		*//**************************************************************************/
		virtual LPMofU8 GetOffsetBuffer(void) = 0;
	};
	
	/*******************************//*!
	@brief	ファイル出力基底インターフェイス

			ファイル出力を取り扱う基底インターフェイス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IWriteFile : public IFile {
	protected:
	public:
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size) = 0;
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				@param[in]		Num			書き込みデータ数
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size,MofU32 Num) = 0;
		/*************************************************************************//*!
				@brief			ファイルへテキストを書きこむ
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool Write(const CString& str) = 0;

		/*************************************************************************//*!
				@brief			ファイルへS8型のデータを書きこむ
				@param			val			書き込むS8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS8(MofS8 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへU8型のデータを書きこむ
				@param			val			書き込むU8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU8(MofU8 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへS16型のデータを書きこむ
				@param			val			書き込むS16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS16(MofS16 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへU16型のデータを書きこむ
				@param			val			書き込むU16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU16(MofU16 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへS32型のデータを書きこむ
				@param			val			書き込むS32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS32(MofS32 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへU32型のデータを書きこむ
				@param			val			書き込むU32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU32(MofU32 val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへFloat型のデータを書きこむ
				@param			val			書き込むFloat型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteFloat(MofFloat val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへDouble型のデータを書きこむ
				@param			val			書き込むDouble型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteDouble(MofDouble val) = 0;
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納される
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str) = 0;
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に Tok 〜〜〜 Tok の形式で格納される
				@param[in]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar Tok) = 0;
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に STok 〜〜〜 ETok の形式で格納される
				@param[in]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar STok,const MofChar ETok) = 0;
		/*************************************************************************//*!
				@brief			ファイルへVector2型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,yの順で格納される
				@param[in]		v			Vector2
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector2(const Vector2& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルへVector3型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,zの順で格納される
				@param[in]		v			Vector3
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector3(const Vector3& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルへVector4型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,z,wの順で格納される
				@param[in]		v			Vector4
				
				@return			書き込んだVector4型データ
		*//**************************************************************************/
		virtual MofBool WriteVector4(const Vector4& v) = 0;
		/*************************************************************************//*!
				@brief			ファイルへQuaternion型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でw,x,y,zの順で格納される
				@param[in]		q			Quaternion
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteQuaternion(const Quaternion& q) = 0;
		/*************************************************************************//*!
				@brief			ファイルへRectangle型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でLeft,Top,Right,Bottomの順で格納される
				@param[in]		r			Rectangle
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteRectangle(const Rectangle& r) = 0;
		/*************************************************************************//*!
				@brief			ファイルからCircle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,rの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool WriteCircle(const Circle& r) = 0;
		/*************************************************************************//*!
				@brief			ファイルへMatrix33型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_21,_22,_23,_31,_32,_33の順で格納される
				@param[in]		m			Matrix33
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix33(const Matrix33& m) = 0;
		/*************************************************************************//*!
				@brief			ファイルへMatrix44型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_14,_21,_22,_23,_24,_31,_32,_33,_34,_41,_42,_43,_44の順で格納される
				@param[in]		m			Matrix44
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix44(const Matrix44& m) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			ファイルポインタ取得
				@param			None

				@return			ファイルポインタの取得
		*//**************************************************************************/
		virtual FILE* GetFilePointer(void) = 0;
	};
}

#endif

//[EOF]