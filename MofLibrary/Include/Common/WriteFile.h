/*************************************************************************//*!
					
					@file	WriteFile.h
					@brief	ファイル出力を取り扱うクラス

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__WRITEFILE__H__

#define		__WRITEFILE__H__

//INCLUDE
#include	"File.h"

namespace Mof {
	
	/*******************************//*!
	@brief	ファイル出力基底クラス

			ファイル出力を取り扱う基底クラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CWriteFile : public IWriteFile {
	protected:
		/*******************//*!
		名前
		*//********************/
		CString						m_Name;
		/*******************//*!
		出力ファイル
		*//********************/
		FILE*						m_pFile;
		/*******************//*!
		出力ファイル容量
		*//********************/
		MofU32						m_Size;
		/*******************//*!
		オフセット
		*//********************/
		MofU32						m_Offset;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CWriteFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CWriteFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CWriteFile(const CWriteFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CWriteFile();
		
		/*************************************************************************//*!
				@brief			ファイルのオフセット移動
				@param[in]		Point		シーク位置
				@param[in]		SeekType	シーク基準位置
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Seek(MofS32 Point,FileSeekOrigin SeekType);
		/*************************************************************************//*!
				@brief			ファイルオフセットを取得する
				@param			None
				
				@return			ファイルオフセット
		*//**************************************************************************/
		virtual MofS32 Tell(void);
		
		/*************************************************************************//*!
				@brief			ファイルを閉じる
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Close(void);
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			ファイルポインタ取得
				@param			None

				@return			ファイルポインタの取得
		*//**************************************************************************/
		virtual FILE* GetFilePointer(void);
		/*************************************************************************//*!
				@brief			ファイルバッファサイズ取得
				@param			None

				@return			ファイルバッファサイズの取得
		*//**************************************************************************/
		virtual MofU32 GetBufferSize(void);
		/*************************************************************************//*!
				@brief			ファイルバッファ参照オフセット取得
				@param			None

				@return			ファイルバッファ参照オフセットの取得
		*//**************************************************************************/
		virtual MofU32 GetOffset(void);
	};

	/*******************************//*!
	@brief	テキストファイル出力クラス

			テキストファイル出力を取り扱うクラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CWriteTextFile : public CWriteFile {
	protected:
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CWriteTextFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CWriteTextFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CWriteTextFile(const CWriteTextFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CWriteTextFile();
		
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size);
				
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size);
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				@param[in]		Num			書き込みデータ数
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size,MofU32 Num);
		/*************************************************************************//*!
				@brief			ファイルへテキストを書きこむ
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool Write(const CString& str);

		/*************************************************************************//*!
				@brief			ファイルへS8型のデータを書きこむ
				@param[in]		val			書き込むS8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS8(MofS8 val);
		/*************************************************************************//*!
				@brief			ファイルへU8型のデータを書きこむ
				@param[in]		val			書き込むU8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU8(MofU8 val);
		/*************************************************************************//*!
				@brief			ファイルへS16型のデータを書きこむ
				@param[in]		val			書き込むS16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS16(MofS16 val);
		/*************************************************************************//*!
				@brief			ファイルへU16型のデータを書きこむ
				@param[in]		val			書き込むU16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU16(MofU16 val);
		/*************************************************************************//*!
				@brief			ファイルへS32型のデータを書きこむ
				@param[in]		val			書き込むS32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS32(MofS32 val);
		/*************************************************************************//*!
				@brief			ファイルへU32型のデータを書きこむ
				@param[in]		val			書き込むU32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU32(MofU32 val);
		/*************************************************************************//*!
				@brief			ファイルへFloat型のデータを書きこむ
				@param[in]		val			書き込むFloat型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteFloat(MofFloat val);
		/*************************************************************************//*!
				@brief			ファイルへDouble型のデータを書きこむ
				@param[in]		val			書き込むDouble型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteDouble(MofDouble val);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納される
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に Tok 〜〜〜 Tok の形式で格納される
				@param[in]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に STok 〜〜〜 ETok の形式で格納される
				@param[in]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルへVector2型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,yの順で格納される
				@param[in]		v			Vector2
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector2(const Vector2& v);
		/*************************************************************************//*!
				@brief			ファイルへVector3型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,zの順で格納される
				@param[in]		v			Vector3
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector3(const Vector3& v);
		/*************************************************************************//*!
				@brief			ファイルへVector4型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,z,wの順で格納される
				@param[in]		v			Vector4
				
				@return			書き込んだVector4型データ
		*//**************************************************************************/
		virtual MofBool WriteVector4(const Vector4& v);
		/*************************************************************************//*!
				@brief			ファイルへQuaternion型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でw,x,y,zの順で格納される
				@param[in]		q			Quaternion
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteQuaternion(const Quaternion& q);
		/*************************************************************************//*!
				@brief			ファイルへRectangle型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でLeft,Top,Right,Bottomの順で格納される
				@param[in]		r			Rectangle
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteRectangle(const Rectangle& r);
		/*************************************************************************//*!
				@brief			ファイルからCircle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,rの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool WriteCircle(const Circle& r);
		/*************************************************************************//*!
				@brief			ファイルへMatrix33型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_21,_22,_23,_31,_32,_33の順で格納される
				@param[in]		m			Matrix33
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix33(const Matrix33& m);
		/*************************************************************************//*!
				@brief			ファイルへMatrix44型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_14,_21,_22,_23,_24,_31,_32,_33,_34,_41,_42,_43,_44の順で格納される
				@param[in]		m			Matrix44
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix44(const Matrix44& m);
		
		//クラス基本定義
		MOF_LIBRARYCLASS(CWriteTextFile,MOF_WRITETEXTFILECLASS_ID);
	};

	/*******************************//*!
	@brief	バイナリファイル出力クラス

			バイナリファイル出力を取り扱うクラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CWriteBinaryFile : public CWriteFile {
	protected:
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CWriteBinaryFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CWriteBinaryFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CWriteBinaryFile(const CWriteBinaryFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CWriteBinaryFile();
		
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size);
		
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size);
		/*************************************************************************//*!
				@brief			ファイルへ書き込む
				@param[in]		pData		書き込みデータ格納ポインタ
				@param[in]		Size		書き込みデータサイズ
				@param[in]		Num			書き込みデータ数
				
				@return			書き込んだデータサイズ<br>
								-1の場合書き込みエラー
		*//**************************************************************************/
		virtual MofS32 Write(LPCMofVoid pData,MofU32 Size,MofU32 Num);
		/*************************************************************************//*!
				@brief			ファイルへテキストを書きこむ
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool Write(const CString& str);

		/*************************************************************************//*!
				@brief			ファイルへS8型のデータを書きこむ
				@param[in]		val			書き込むS8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS8(MofS8 val);
		/*************************************************************************//*!
				@brief			ファイルへU8型のデータを書きこむ
				@param[in]		val			書き込むU8型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU8(MofU8 val);
		/*************************************************************************//*!
				@brief			ファイルへS16型のデータを書きこむ
				@param[in]		val			書き込むS16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS16(MofS16 val);
		/*************************************************************************//*!
				@brief			ファイルへU16型のデータを書きこむ
				@param[in]		val			書き込むU16型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU16(MofU16 val);
		/*************************************************************************//*!
				@brief			ファイルへS32型のデータを書きこむ
				@param[in]		val			書き込むS32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteS32(MofS32 val);
		/*************************************************************************//*!
				@brief			ファイルへU32型のデータを書きこむ
				@param[in]		val			書き込むU32型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteU32(MofU32 val);
		/*************************************************************************//*!
				@brief			ファイルへFloat型のデータを書きこむ
				@param[in]		val			書き込むFloat型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteFloat(MofFloat val);
		/*************************************************************************//*!
				@brief			ファイルへDouble型のデータを書きこむ
				@param[in]		val			書き込むDouble型データ
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteDouble(MofDouble val);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納される
				@param[in]		str			文字列
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に Tok 〜〜〜 Tok の形式で格納される
				@param[in]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルへ文字列型のデータを書きこむ<br>
								データは書き込むファイル内に STok 〜〜〜 ETok の形式で格納される
				@param[in]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteString(const CString& str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルへVector2型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,yの順で格納される
				@param[in]		v			Vector2
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector2(const Vector2& v);
		/*************************************************************************//*!
				@brief			ファイルへVector3型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,zの順で格納される
				@param[in]		v			Vector3
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteVector3(const Vector3& v);
		/*************************************************************************//*!
				@brief			ファイルへVector4型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でx,y,z,wの順で格納される
				@param[in]		v			Vector4
				
				@return			書き込んだVector4型データ
		*//**************************************************************************/
		virtual MofBool WriteVector4(const Vector4& v);
		/*************************************************************************//*!
				@brief			ファイルへQuaternion型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でw,x,y,zの順で格納される
				@param[in]		q			Quaternion
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteQuaternion(const Quaternion& q);
		/*************************************************************************//*!
				@brief			ファイルへRectangle型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型でLeft,Top,Right,Bottomの順で格納される
				@param[in]		r			Rectangle
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteRectangle(const Rectangle& r);
		/*************************************************************************//*!
				@brief			ファイルからCircle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,rの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool WriteCircle(const Circle& r);
		/*************************************************************************//*!
				@brief			ファイルへMatrix33型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_21,_22,_23,_31,_32,_33の順で格納される
				@param[in]		m			Matrix33
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix33(const Matrix33& m);
		/*************************************************************************//*!
				@brief			ファイルへMatrix44型のデータを書きこむ<br>
								データは書き込むファイル内にFloat型で_11,_12,_13,_14,_21,_22,_23,_24,_31,_32,_33,_34,_41,_42,_43,_44の順で格納される
				@param[in]		m			Matrix44
				
				@return			TRUE		正常に書き込むことができた
								FALSE		書き込みエラー
		*//**************************************************************************/
		virtual MofBool WriteMatrix44(const Matrix44& m);

		//クラス基本定義
		MOF_LIBRARYCLASS(CWriteBinaryFile,MOF_WRITEBINARYFILECLASS_ID);
	};
	
	//TYPEDEF
	typedef CWriteFile* LPWriteFile;
	typedef CWriteTextFile* LPWriteTextFile;
	typedef CWriteBinaryFile* LPWriteBinaryFile;

	#include	"WriteFile.inl"
}

#endif

//[EOF]