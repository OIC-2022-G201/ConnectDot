/*************************************************************************//*!
					
					@file	Thread.h
					@brief	スレッドを作成実行するための基底インターフェイスとクラス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__THREAD__H__

#define		__THREAD__H__

//INCLUDE
#include	"DynamicArray.h"

namespace Mof {
	
	/*******************************//*!
	@brief	スレッド基底インターフェイス

			スレッド基底インターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IThread : public IMofNamedObject {
	private:
	public:
		/*******************************//*!
		@brief	スレッドプライオリティ列挙

				スレッド実行の優先度を示すプライオリティ列挙。

		@author	CDW
		*//********************************/
		typedef enum ThreadPriorities {
			THREADPRIORITIES_LOWEST,				//!<最低
			THREADPRIORITIES_LOW,					//!<低
			THREADPRIORITIES_NORMAL,				//!<普通
			THREADPRIORITIES_HIGH,					//!<高
			THREADPRIORITIES_HIGHEST,				//!<最高
			THREADPRIORITIES_INHERIT,				//!<設定なし
		}ThreadPriorities;
		
		/*************************************************************************//*!
				@brief			スレッドの開始
				@param[in]		pName			スレッドの名前
				@param[in]		priority		スレッドの優先度
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Start(LPCMofChar pName,ThreadPriorities priority = THREADPRIORITIES_INHERIT) = 0;
		/*************************************************************************//*!
				@brief			スレッドの内部実行処理<br>
								実装は継承先の各種スレッドクラスで行う
				@param			None

				@return			None
		*//**************************************************************************/
		virtual void Run(void) = 0;
		/*************************************************************************//*!
				@brief			スレッドの同期
				@param[in]		w				待機時間(msec)
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Join(MofU32 w = 0) = 0;
	};

	//スレッド置き換え
	typedef IThread			*LPThread;
	
	/*******************************//*!
	@brief	スレッド基底クラス

			スレッド基底クラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CThread : public IThread {
	private:
		/*******************//*!
		スレッド名
		*//********************/
		CString						m_Name;
		/*******************//*!
		スレッドID
		*//********************/
		MofThreadID					m_ID;
		
		/*************************************************************************//*!
				@brief			スレッドの呼び出しのもとになるstaticコール関数
				@param[in]		pData			スレッドの開始時に与えられたCThreadクラスポインタ

				@return			各環境のスレッドの実装に依存
		*//**************************************************************************/
#ifdef		MOFLIB_WINDOWS
		static unsigned int __stdcall ThreadCallback( void* pData );
#else
		static void* ThreadCallback( void* pData );
#endif
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CThread();
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CThread();
		
		/*************************************************************************//*!
				@brief			スレッドの開始
				@param[in]		pName			スレッドの名前
				@param[in]		priority		スレッドの優先度
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Start(LPCMofChar pName,ThreadPriorities priority = THREADPRIORITIES_INHERIT);
		/*************************************************************************//*!
				@brief			スレッドの同期
				@param[in]		w				待機時間(msec)
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Join(MofU32 w = 0);
		
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		
		//クラス基本定義
		MOF_LIBRARYCLASS_NOTCOPY(CThread,MOF_THREADCLASS_ID);
	};
	
	/*******************************//*!
	@brief	スレッド内部処理実装基底クラス

			スレッド内部処理実装基底クラス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CRunnable : public IMofObject {
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CRunnable();

		/*************************************************************************//*!
				@brief			スレッドの内部実行処理<br>
								実装は継承先の各種スレッドクラスで行う
				@param			None

				@return			None
		*//**************************************************************************/
		virtual void Run(void) = 0;
		
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTCOPY(CRunnable,MOF_RUNNABLECLASS_ID);
	};

	//内部実装置き換え
	typedef CRunnable		*LPRunnable;

	/*******************************//*!
	@brief	スレッドクラス

			スレッドクラス。<br>
			継承された内部処理実装クラスのRunが実行されるスレッド

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CRunnableThread : public CThread {
	protected:
		/*******************//*!
		実装クラス
		*//********************/
		LPRunnable					m_pRunnable;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			pRunnable		内部の処理実装

				@return			None
		*//**************************************************************************/
		CRunnableThread(LPRunnable pRunnable);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CRunnableThread();

		/*************************************************************************//*!
				@brief			スレッドの内部実行処理<br>
								コンストラクタで与えられたのCRunnableのRunを実行する。
				@param			None

				@return			None
		*//**************************************************************************/
		virtual void Run(void);
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//クラス基本定義
		MOF_LIBRARYCLASS_NOTCOPY(CRunnableThread,MOF_RUNNABLETHREADCLASS_ID);
	};
	
	/*******************************//*!
	@brief	スレッドクラス

			スレッドクラス。<br>
			継承された内部処理実装クラスのRunが実行されるスレッド

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CCallbackThread : public CThread {
	protected:
		
		/*************************************************************************//*!
				@brief			内部関数実行インターフェイス
		*//**************************************************************************/
		struct ICallbackFuncImpl {
			virtual ~ICallbackFuncImpl(){}
			virtual void operator()() = 0;
		};
		/*************************************************************************//*!
				@brief			内部関数実行
		*//**************************************************************************/
		template < typename Func > struct CallbackFuncImpl : public ICallbackFuncImpl {
			Func						m_Func;
			CallbackFuncImpl(Func f) : m_Func(f){}
			virtual ~CallbackFuncImpl(){}
			virtual void operator()(){m_Func();}
		};
		/*******************//*!
		実装関数
		*//********************/
		ICallbackFuncImpl*				m_pFunc;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			f				内部の処理コールバック

				@return			None
		*//**************************************************************************/
		template < typename Func > CCallbackThread(Func f);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CCallbackThread();

		/*************************************************************************//*!
				@brief			スレッドの内部実行処理<br>
								コンストラクタで与えられたのCRunnableのRunを実行する。
				@param			None

				@return			None
		*//**************************************************************************/
		virtual void Run(void);
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);
		
		//クラス基本定義
		MOF_LIBRARYCLASS_NOTCOPY(CCallbackThread,MOF_CALLBACKTHREADCLASS_ID);
	};

	#include	"Thread.inl"
}

#endif

//[EOF]