/*************************************************************************//*!
					
					@file	ReadFile.h
					@brief	ファイル入力を取り扱うクラス

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__READFILE__H__

#define		__READFILE__H__

//INCLUDE
#include	"File.h"

namespace Mof {
	
	/*******************************//*!
	@brief	ファイル入力基底クラス

			ファイル入力を取り扱う基底クラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CReadFile : public IReadFile {
	protected:
		/*******************//*!
		名前
		*//********************/
		CString						m_Name;
		/*******************//*!
		ファイルバッファ
		*//********************/
		LPMofU8						m_pBuffer;
		/*******************//*!
		ファイル容量
		*//********************/
		MofU32						m_Size;
		/*******************//*!
		オフセット
		*//********************/
		MofU32						m_Offset;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CReadFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CReadFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CReadFile(const CReadFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CReadFile();
		
		/*************************************************************************//*!
				@brief			ファイルのオフセット移動
				@param[in]		Point		シーク位置
				@param[in]		SeekType	シーク基準位置
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Seek(MofS32 Point,FileSeekOrigin SeekType);
		/*************************************************************************//*!
				@brief			ファイルオフセットを取得する
				@param			None
				
				@return			ファイルオフセット
		*//**************************************************************************/
		virtual MofS32 Tell(void);
		
		/*************************************************************************//*!
				@brief			ファイルから読みこむ
				@param[out]		pData		読み込みデータ格納ポインタ
				@param[in]		Size		読み込みデータサイズ
				
				@return			読み込んだデータサイズ<br>
								-1の場合読み込みエラー
		*//**************************************************************************/
		virtual MofS32 Read(LPMofVoid pData,MofU32 Size);
		/*************************************************************************//*!
				@brief			ファイルから読みこむ
				@param[out]		pData		読み込みデータ格納ポインタ
				@param[in]		Size		読み込みデータサイズ
				@param[in]		Num			読み込みデータ数
				
				@return			読み込んだデータサイズ<br>
								-1の場合読み込みエラー
		*//**************************************************************************/
		virtual MofS32 Read(LPMofVoid pData,MofU32 Size,MofU32 Num);
		
		/*************************************************************************//*!
				@brief			ファイルからVector2型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,yの順で格納されていること
				@param[out]		v			Vector2
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadVector2(Vector2& v);
		/*************************************************************************//*!
				@brief			ファイルからVector3型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,zの順で格納されていること
				@param[out]		v			Vector3
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadVector3(Vector3& v);
		/*************************************************************************//*!
				@brief			ファイルからVector4型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,z,wの順で格納されていること
				@param[out]		v			Vector4
				
				@return			読み込んだVector4型データ
		*//**************************************************************************/
		virtual MofBool ReadVector4(Vector4& v);
		/*************************************************************************//*!
				@brief			ファイルからQuaternion型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でw,x,y,zの順で格納されていること
				@param[out]		q			Quaternion
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadQuaternion(Quaternion& q);
		/*************************************************************************//*!
				@brief			ファイルからRectangle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でLeft,Top,Right,Bottomの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadRectangle(Rectangle& r);
		/*************************************************************************//*!
				@brief			ファイルからCircle型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型でx,y,rの順で格納されていること
				@param[out]		r			Rectangle
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadCircle(Circle& r);
		/*************************************************************************//*!
				@brief			ファイルからMatrix33型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型で_11,_12,_13,_21,_22,_23,_31,_32,_33の順で格納されていること
				@param[out]		m			Matrix33
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadMatrix33(Matrix33& m);
		/*************************************************************************//*!
				@brief			ファイルからMatrix44型のデータを読みこむ<br>
								データは読み込むファイル内にFloat型で_11,_12,_13,_14,_21,_22,_23,_24,_31,_32,_33,_34,_41,_42,_43,_44の順で格納されていること
				@param[out]		m			Matrix44
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadMatrix44(Matrix44& m);
		
		/*************************************************************************//*!
				@brief			ファイルを閉じる
				@param			None
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Close(void);
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);

		/*************************************************************************//*!
				@brief			ファイルオフセット位置がバッファの終端を超えているか判定
				@param			None
				
				@return			TRUE		指し示す位置は終端
								FALSE		まだ存在する
		*//**************************************************************************/
		virtual MofBool IsEOF(void);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前設定
				@param[in]		pName			設定する名前
				
				@return			TRUE			正常終了<br>
								それ以外		設定エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool SetName(LPCMofChar pName);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			名前取得
				@param			None

				@return			名前の取得
		*//**************************************************************************/
		virtual LPString GetName(void);
		/*************************************************************************//*!
				@brief			ファイルバッファ取得
				@param			None

				@return			ファイルバッファの取得
		*//**************************************************************************/
		virtual LPMofU8 GetBuffer(void);
		/*************************************************************************//*!
				@brief			オフセット位置のファイルバッファ取得
				@param			None

				@return			オフセット位置のファイルバッファの取得
		*//**************************************************************************/
		virtual LPMofU8 GetOffsetBuffer(void);
		/*************************************************************************//*!
				@brief			ファイルバッファサイズ取得
				@param			None

				@return			ファイルバッファサイズの取得
		*//**************************************************************************/
		virtual MofU32 GetBufferSize(void);
		/*************************************************************************//*!
				@brief			ファイルバッファ参照オフセット取得
				@param			None

				@return			ファイルバッファ参照オフセットの取得
		*//**************************************************************************/
		virtual MofU32 GetOffset(void);
	};

	/*******************************//*!
	@brief	テキストファイル入力クラス

			テキストファイル入力を取り扱うクラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CReadTextFile : public CReadFile {
	protected:
		/*************************************************************************//*!
				@brief			現在のオフセットの次の数字までオフセットを進める
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、文字列が見つかる前に終端に到達した
		*//**************************************************************************/
		MofBool ToNoMoveOffset();
		/*************************************************************************//*!
				@brief			現在のオフセットの次のトークンまでオフセットを進める
				@param			None

				@return			TRUE		成功<br>
								それ以外	失敗、文字列が見つかる前に終端に到達した
		*//**************************************************************************/
		MofBool MoveOffset(LPMofChar Skip,MofU32 TokCnt);
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CReadTextFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CReadTextFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CReadTextFile(const CReadTextFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CReadTextFile();
		
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName, LPDecryptFile pDec);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size, LPDecryptFile pDec);
		
		/*************************************************************************//*!
				@brief			ファイルからS8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS8型データ
		*//**************************************************************************/
		virtual MofS8 ReadS8(void);
		/*************************************************************************//*!
				@brief			ファイルからU8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU8型データ
		*//**************************************************************************/
		virtual MofU8 ReadU8(void);
		/*************************************************************************//*!
				@brief			ファイルからS16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS16型データ
		*//**************************************************************************/
		virtual MofS16 ReadS16(void);
		/*************************************************************************//*!
				@brief			ファイルからU16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU16型データ
		*//**************************************************************************/
		virtual MofU16 ReadU16(void);
		/*************************************************************************//*!
				@brief			ファイルからS32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS32型データ
		*//**************************************************************************/
		virtual MofS32 ReadS32(void);
		/*************************************************************************//*!
				@brief			ファイルからU32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU32型データ
		*//**************************************************************************/
		virtual MofU32 ReadU32(void);
		/*************************************************************************//*!
				@brief			ファイルからFloat型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだFloat型データ
		*//**************************************************************************/
		virtual MofFloat ReadFloat(void);
		/*************************************************************************//*!
				@brief			ファイルからDouble型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだDouble型データ
		*//**************************************************************************/
		virtual MofDouble ReadDouble(void);

		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,LPCMofChar pTok,MofU32 TokCnt);
				
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,LPCMofChar pTok,MofU32 TokCnt);

		//クラス基本定義
		MOF_LIBRARYCLASS(CReadTextFile,MOF_READTEXTFILECLASS_ID);
	};

	/*******************************//*!
	@brief	バイナリファイル入力クラス

			バイナリファイル入力を取り扱うクラス

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CReadBinaryFile : public CReadFile {
	protected:
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CReadBinaryFile();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		pName		ファイル名

				@return			None
		*//**************************************************************************/
		CReadBinaryFile(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピー

				@return			None
		*//**************************************************************************/
		CReadBinaryFile(const CReadBinaryFile& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CReadBinaryFile();
		
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName);
		/*************************************************************************//*!
				@brief			ファイルを開く
				@param[in]		pName		ファイル名
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName, LPDecryptFile pDec);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size);
		/*************************************************************************//*!
				@brief			与えられたバッファをそのままファイルとして扱う
				@param[in]		pName		ファイル名
				@param[in]		pBuffer		バッファ
				@param[in]		Size		サイズ
				@param[in]		pDec		複合化クラス
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Open(LPCMofChar pName,LPCMofVoid pBuffer,const MofU32 Size, LPDecryptFile pDec);
		
		/*************************************************************************//*!
				@brief			ファイルからS8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS8型データ
		*//**************************************************************************/
		virtual MofS8 ReadS8(void);
		/*************************************************************************//*!
				@brief			ファイルからU8型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU8型データ
		*//**************************************************************************/
		virtual MofU8 ReadU8(void);
		/*************************************************************************//*!
				@brief			ファイルからS16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS16型データ
		*//**************************************************************************/
		virtual MofS16 ReadS16(void);
		/*************************************************************************//*!
				@brief			ファイルからU16型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU16型データ
		*//**************************************************************************/
		virtual MofU16 ReadU16(void);
		/*************************************************************************//*!
				@brief			ファイルからS32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだS32型データ
		*//**************************************************************************/
		virtual MofS32 ReadS32(void);
		/*************************************************************************//*!
				@brief			ファイルからU32型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだU32型データ
		*//**************************************************************************/
		virtual MofU32 ReadU32(void);
		/*************************************************************************//*!
				@brief			ファイルからFloat型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだFloat型データ
		*//**************************************************************************/
		virtual MofFloat ReadFloat(void);
		/*************************************************************************//*!
				@brief			ファイルからDouble型のデータを読みこむ<br>
								テキストファイルの場合は一連の数字と判断できる範囲の間オフセットが進行する。
				@param			None
				
				@return			読み込んだDouble型データ
		*//**************************************************************************/
		virtual MofDouble ReadDouble(void);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(CString& str,LPCMofChar pTok,MofU32 TokCnt);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[in]		bUnicode	UNICODEフラグ（TRUEならUNICODE形式で文字列が入っている）
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadStringCode(MofBool bUnicode, CString& str);

		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に Tok 〜〜〜 Tok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		Tok			トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar Tok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内に STok 〜〜〜 ETok の形式で格納されていること
				@param[out]		str			文字列
				@param[in]		STok		開始トークン
				@param[in]		ETok		終了トークン
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,const MofChar STok,const MofChar ETok);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内のオフセット位置の次のpTok以外の文字からpTokのどれかまで読み込む
				@param[out]		str			文字列
				@param[in]		pTok		トークン
				@param[in]		TokCnt		トークンの数
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadString(LPMofChar str,LPCMofChar pTok,MofU32 TokCnt);
		/*************************************************************************//*!
				@brief			ファイルから文字列型のデータを読みこむ<br>
								データは読み込むファイル内にテキストの場合は"〜〜〜"の形式で、<be>
								バイナリの場合はU32で長さの後に文字列データの形式で格納されていること
				@param[in]		bUnicode	UNICODEフラグ（TRUEならUNICODE形式で文字列が入っている）
				@param[out]		str			文字列
				
				@return			TRUE		正常に読み込むことができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool ReadStringCode(MofBool bUnicode, LPMofChar str);

		//クラス基本定義
		MOF_LIBRARYCLASS(CReadBinaryFile,MOF_READBINARYFILECLASS_ID);
	};
	
	//TYPEDEF
	typedef CReadFile* LPReadFile;
	typedef CReadTextFile* LPReadTextFile;
	typedef CReadBinaryFile* LPReadBinaryFile;

	#include	"ReadFile.inl"
}

#endif

//[EOF]