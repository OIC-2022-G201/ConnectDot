/*************************************************************************//*!
					
					@file	SmartPointer.h
					@brief	スマートポインタクラス

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__SMARTPOINTER__H__

#define		__SMARTPOINTER__H__

//INCLUDE
#include	"Allocator.h"

namespace Mof {
	
	/*******************************//*!
	@brief	基底スマートポインタ

			スマートポインタ。

	@author	CDW
	*//********************************/
	template < typename T > class MOFLIBRARY_API CSmartPointer : public IMofObject {
	protected:
		/*******************//*!
		データポインタ
		*//********************/
		T*					m_pPtr;
		/*******************//*!
		参照数
		*//********************/
		MofU32*				m_pRefCount;

		/*************************************************************************//*!
				@brief			参集数の追加<br>
								現在のデータ参照数を増加させる。<br>
								作成時、コピー時に内部で自動的に実行される。
				@param			None

				@return			None
		*//**************************************************************************/
		void AddRef(void);
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CSmartPointer();
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param[in]		p		保存データ

				@return			None
		*//**************************************************************************/
		CSmartPointer(T* p);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj			コピーオブジェクト

				@return			None
		*//**************************************************************************/
		CSmartPointer(const CSmartPointer<T>& pObj);
		/*************************************************************************//*!
				@brief			コピーコンストラクタ<br>
								自分の保存している型と自動変換可能な場合のみ
				@param[in]		pObj			コピーオブジェクト

				@return			None
		*//**************************************************************************/
		template< typename U >CSmartPointer(const CSmartPointer<U>& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CSmartPointer();
		/*************************************************************************//*!
				@brief			解放
				@param[in]		pData			解放追加データ

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool Release(LPMofVoid pData = NULL);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			参照取得
				@param			None

				@return			参照
		*//**************************************************************************/
		T* GetPointer(void);
		/*************************************************************************//*!
				@brief			参照数取得
				@param			None

				@return			参照数
		*//**************************************************************************/
		MofU32 GetReferenceCounter(void);

		//----------------------------------------------------------------------------
		////Operator
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			代入<br>
								内部参照を変更して代入対象の参照を増加させる。
		*//**************************************************************************/
		CSmartPointer<T>& operator = (T* p);
		/*************************************************************************//*!
				@brief			代入<br>
								内部参照を変更して代入対象の参照を増加させる。
		*//**************************************************************************/
		CSmartPointer<T>& operator = (const CSmartPointer<T>& p);
		/*************************************************************************//*!
				@brief			代入<br>
								内部参照を変更して代入対象の参照を増加させる。
		*//**************************************************************************/
		template< typename U > CSmartPointer<T>& operator = (const CSmartPointer<U>& p);
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == (const CSmartPointer<T>& p) const;
		/*************************************************************************//*!
				@brief			==判断
		*//**************************************************************************/
		bool operator == (T* p) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != (const CSmartPointer<T>& p) const;
		/*************************************************************************//*!
				@brief			!=判断
		*//**************************************************************************/
		bool operator != (T* p) const;
		/*************************************************************************//*!
				@brief			内部ポインタへのアクセス<br>
								参照の外部での直接解放は行わないこと
		*//**************************************************************************/
		T& operator * ();
		/*************************************************************************//*!
				@brief			内部ポインタへのアクセス<br>
								参照の外部での直接解放は行わないこと
		*//**************************************************************************/
		T& operator * () const;
		/*************************************************************************//*!
				@brief			内部ポインタデータへのアクセス<br>
								参照の外部での直接解放は行わないこと
		*//**************************************************************************/
		T* operator -> ();
		/*************************************************************************//*!
				@brief			内部ポインタデータへのアクセス<br>
								参照の外部での直接解放は行わないこと
		*//**************************************************************************/
		T* operator -> () const;

		//クラス基本定義
		MOF_LIBRARYCLASS_NOTEQUAL(CSmartPointer,MOF_SMARTPOINTERCLASS_ID);
	};

	//INLINE INCLUDE
	#include	"SmartPointer.inl"

}

#endif		//#ifndef	__SMARTPOINTER__H__

//[EOF]