/*************************************************************************//*!
					
					@file	Input.h
					@brief	各種入力の処理を行う基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__INPUT__H__

#define		__INPUT__H__

//INCLUDE
#include	"GamePad.h"

namespace Mof {
	
	/*******************************//*!
	@brief	インプット生成情報構造体

			インプットの生成に必要な情報をまとめた構造体

	@author	CDW
	*//********************************/
	typedef struct tag_INPUTCREATEINFO {
		MofU32					Size;						//!<構造体サイズ
		MofU32					Flags;						//!<生成フラグ

		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		tag_INPUTCREATEINFO() :
		Size(sizeof(tag_INPUTCREATEINFO)) ,
		Flags(0) {
		}
	}INPUTCREATEINFO,*LPINPUTCREATEINFO;

	/*******************************//*!
	@brief	タッチ情報

			タッチ情報構造体。

	@author	CDW
	*//********************************/
	typedef struct tag_TOUCHSTATE {
		Vector2						Pos;					//!<座標
		MofS32						Id;						//!<ID
		MofBool						bTouch;					//!<タッチフラグ
	}MOFTOUCHSTATE,*LPMOFTOUCHSTATE;
	typedef const MOFTOUCHSTATE* LPCMOFTOUCHSTATE;

	/*******************************//*!
	@brief	インプット基底インターフェイス

			インプットの基底となるインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IInput : public IMofObject {
	protected:
	public:
		/*************************************************************************//*!
				@brief			インプットオブジェクトの生成
				@param[in]		pInfo		インプットの生成情報
				
				@return			TRUE		成功<br>
								それ以外	失敗、エラーコードが戻り値となる
		*//**************************************************************************/
		virtual MofBool Create(LPINPUTCREATEINFO pInfo) = 0;
		
		/*************************************************************************//*!
				@brief			入力キー更新
				@param			None

				@return			TRUE			正常終了<br>
								それ以外		解放エラー、エラーコードを返す。
		*//**************************************************************************/
		virtual MofBool RefreshKey(void) = 0;
		
		/*************************************************************************//*!
				@brief			キーボードキー入力状態判定<br>
								キー番号のキーのPush(このフレームで入力された)判定を行う
				@param[in]		n				キー番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsKeyPush(const MofU8 n) = 0;
		/*************************************************************************//*!
				@brief			キーボードキー入力状態判定<br>
								キー番号のキーのHold(このフレームで入力されている)判定を行う
				@param[in]		n				キー番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsKeyHold(const MofU8 n) = 0;
		/*************************************************************************//*!
				@brief			キーボードキー入力状態判定<br>
								キー番号のキーのPull(このフレームで放された)判定を行う
				@param[in]		n				キー番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsKeyPull(const MofU8 n) = 0;

		/*************************************************************************//*!
				@brief			マウスボタン入力状態判定<br>
								ボタン番号のボタンのPush(このフレームで入力された)判定を行う
				@param[in]		n				ボタン番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsMouseKeyPush(const MofU8 n) = 0;
		/*************************************************************************//*!
				@brief			マウスボタン入力状態判定<br>
								ボタン番号のボタンのHold(このフレームで入力されている)判定を行う
				@param[in]		n				ボタン番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsMouseKeyHold(const MofU8 n) = 0;
		/*************************************************************************//*!
				@brief			マウスボタン入力状態判定<br>
								ボタン番号のボタンのPull(このフレームで放された)判定を行う
				@param[in]		n				ボタン番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsMouseKeyPull(const MofU8 n) = 0;
		
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチ番号のタッチのPush(このフレームで入力された)判定を行う
				@param[in]		n				タッチ番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchPush(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチIDのタッチのPush(このフレームで入力された)判定を行う
				@param[in]		Id				タッチID

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchPushById(MofS32 Id) = 0;
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチ番号のタッチのHold(このフレームで入力されている)判定を行う
				@param[in]		n				タッチ番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchHold(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチIDのタッチのHold(このフレームで入力されている)判定を行う
				@param[in]		Id				タッチID

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchHoldById(MofS32 Id) = 0;
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチ番号のタッチのPull(このフレームで放された)判定を行う
				@param[in]		n				タッチ番号

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchPull(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			タッチ入力状態判定<br>
								タッチIDのタッチのPull(このフレームで放された)判定を行う
				@param[in]		Id				タッチID

				@return			TRUE			入力あり<br>
								FALSE			入力なし
		*//**************************************************************************/
		virtual MofBool IsTouchPullById(MofS32 Id) = 0;

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			キー状態設定
				@param[in]		n				キー番号
				@param[in]		bState			キー状態
				
				@return			TRUE			設定成功<br>
								FALSE			設定失敗
		*//**************************************************************************/
		virtual MofBool SetKeyState(const MofU8 n,const MofBool bState) = 0;
		/*************************************************************************//*!
				@brief			キー状態設定
				@param[in]		n				キー番号
				@param[in]		bState			キー状態
				
				@return			TRUE			設定成功<br>
								FALSE			設定失敗
		*//**************************************************************************/
		virtual MofBool SetMouseState(const MofU8 n,const MofBool bState) = 0;
		/*************************************************************************//*!
				@brief			ホイール状態設定
				@param[in]		w				ホイール状態
				
				@return			TRUE			設定成功<br>
								FALSE			設定失敗
		*//**************************************************************************/
		virtual MofBool SetMouseWheel(const MofFloat w) = 0;
		/*************************************************************************//*!
				@brief			タッチ情報設定<br>
								タッチ入力が有効な場合のみ処理を実行。
				@param[in]		act				タッチ動作フラグ
				@param[in]		Id				タッチID
				@param[in]		x				タッチX座標
				@param[in]		y				タッチY座標
				
				@return			TRUE			設定成功<br>
								FALSE			設定失敗
		*//**************************************************************************/
		virtual MofBool SetTouchState(MofS32 act,MofS32 Id,MofFloat x,MofFloat y) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			インプットデバイス取得<br>
								使用しない環境で呼び出した場合NULLを返す。
				@param			None

				@return			インプットデバイス
		*//**************************************************************************/
		virtual MofInputDevice GetDevice(void) = 0;
		/*************************************************************************//*!
				@brief			マウス座標を二つのfloat型のデータとして取得する<br>
								Android版で実行するとマウス座標の代わりにタッチ座標が入る。
				@param[out]		px			マウスＸ座標
				@param[out]		py			マウスＹ座標
				
				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetMousePos(MofFloat& px,MofFloat& py) = 0;
		/*************************************************************************//*!
				@brief			マウス座標をVector2型のデータとして取得する<br>
								Android版で実行するとマウス座標の代わりにタッチ座標が入る。
				@param[out]		v			Vector2
				
				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetMousePos(Vector2& v) = 0;
		/*************************************************************************//*!
				@brief			マウスのホイール移動を取得する
				@param			None
				
				@return			ホイール移動量
		*//**************************************************************************/
		virtual MofFloat GetMouseWheelMove(void) = 0;
		/*************************************************************************//*!
				@brief			マウス移動を二つのfloat型のデータとして取得する
				@param[out]		px			マウスＸ移動量
				@param[out]		py			マウスＹ移動量
				
				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetMouseMove(MofFloat& px,MofFloat& py) = 0;
		/*************************************************************************//*!
				@brief			マウス移動をVector3型のデータとして取得する<br>
								x,yにはカーソルの移動量がzにはホイールの移動量が入る
				@param[out]		v			Vector3
				
				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetMouseMove(Vector3& v) = 0;
		/*************************************************************************//*!
				@brief			ゲームパッド接続数取得
				@param			None

				@return			ゲームパッド接続数
		*//**************************************************************************/
		virtual MofU32 GetGamePadCount(void) = 0;
		/*************************************************************************//*!
				@brief			ゲームパッド取得
				@param			None

				@return			ゲームパッド
		*//**************************************************************************/
		virtual LPGamePadArray GetGamePad(void) = 0;
		/*************************************************************************//*!
				@brief			ゲームパッド取得<br>
								番号に接続されているパッドを取得する。<br>
								現在の接続数以上の値を指定した場合NULLを返す
				@param[in]		n			パッド番号

				@return			ゲームパッド
		*//**************************************************************************/
		virtual LPGamePad GetGamePad(MofU32 n) = 0;
		
		/*************************************************************************//*!
				@brief			タッチ認識最大数取得
				@param			None

				@return			タッチ認識最大数
		*//**************************************************************************/
		virtual MofU32 GetTouchMax() = 0;
		/*************************************************************************//*!
				@brief			タッチ状態取得
								タッチされてなければNULLを返す
				@param[in]		n			タッチ番号

				@return			タッチ状態
		*//**************************************************************************/
		virtual LPCMOFTOUCHSTATE GetTouchState(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			IDを使ってタッチ状態取得
								タッチされてなければNULLを返す
				@param[in]		Id			タッチID

				@return			タッチ状態
		*//**************************************************************************/
		virtual LPCMOFTOUCHSTATE GetTouchStateById(MofS32 Id) = 0;
		/*************************************************************************//*!
				@brief			直前のタッチ状態取得
								タッチされてなければNULLを返す
				@param[in]		n			タッチ番号

				@return			直前のタッチ状態
		*//**************************************************************************/
		virtual LPCMOFTOUCHSTATE GetPrevTouchState(MofU32 n) = 0;
		/*************************************************************************//*!
				@brief			IDを使って直前のタッチ状態取得
								タッチされてなければNULLを返す
				@param[in]		Id			タッチID

				@return			直前のタッチ状態
		*//**************************************************************************/
		virtual LPCMOFTOUCHSTATE GetPrevTouchStateById(MofS32 Id) = 0;
		/*************************************************************************//*!
				@brief			タッチ移動を二つのfloat型のデータとして取得する
				@param[in]		n			タッチ番号
				@param[out]		px			タッチＸ移動量
				@param[out]		py			タッチＹ移動量

				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetTouchMove(MofU32 n,MofFloat& px,MofFloat& py) = 0;
		/*************************************************************************//*!
				@brief			タッチ移動を二つのfloat型のデータとして取得する
				@param[in]		Id			タッチID
				@param[out]		px			タッチＸ移動量
				@param[out]		py			タッチＹ移動量

				@return			TRUE		正常に取得することができた
								FALSE		読み込みエラー
		*//**************************************************************************/
		virtual MofBool GetTouchMoveById(MofS32 Id,MofFloat& px,MofFloat& py) = 0;
	};

	//ポインタ置き換え
	typedef IInput*				LPInput;
}

#endif

//[EOF]