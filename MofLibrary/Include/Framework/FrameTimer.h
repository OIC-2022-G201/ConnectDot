/*************************************************************************//*!
					
					@file	FrameTimer.h
					@brief	フレーム時間を計測、調整するための基底インターフェイス。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__FRAMETIMER__H__

#define		__FRAMETIMER__H__

//INCLUDE
#include	"../Common/DynamicArray.h"

//!ミリ秒→秒変換
#define		MOF_MSecToSec(x)						((x) * 0.001f)
//!秒→ミリ秒変換
#define		MOF_SecToMSec(x)						((x) * 1000)

namespace Mof {
	
	/*******************************//*!
	@brief	フレームタイマー基底インターフェイス

			フレーム時間を計測、調整するためのインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API IFrameTimer : public IMofBase {
	protected:
	public:
		/*************************************************************************//*!
				@brief			タイマーの更新<br>
								タイマーの更新を行う。<br>
								前回この関数が呼び出されてから、今回実行されるまでの時間を計測しフレーム時間に設定する。<br>
								bWaitがTRUEなら設定されているFPSまでの余剰時間分をsleepにより待機する。<br>
								FPSが設定されていない場合やbWaitがFALSEの場合は待機処理は行われない。
				@param[in]		bWait		FPSウェイトフラグ
			
				@return			None
		*//**************************************************************************/
		virtual void Update(MofBool bWait) = 0;
		
		/*************************************************************************//*!
				@brief			指定ミリ秒の間停止をおこなう
				@param[in]		s			スリープ時間
			
				@return			None
		*//**************************************************************************/
		static void Sleep(MofU32 s);

		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			FPSの設定<br>
								FPSの固定をする場合に設定を行う。<br>
								引数のFPSに0を設定すると固定なしの時間計測のみの処理になる。
				@param[in]		s			FPS
			
				@return			TRUE		正常に設定された<br>
								FALSE		設定の失敗
		*//**************************************************************************/
		virtual MofBool SetFPS(MofU32 s) = 0;
		/*************************************************************************//*!
				@brief			フレーム時間の設定<br>
								このタイマーで経過したフレーム時間を引数のmsecに差し替える。
				@param[in]		s			フレーム時間(msec)
			
				@return			TRUE		正常に設定された<br>
								FALSE		設定の失敗
		*//**************************************************************************/
		virtual MofBool SetFrameMSecond(MofU32 s) = 0;

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			制限FPS取得
				@param			None

				@return			FPSの制限値
		*//**************************************************************************/
		virtual MofU32 GetRestrictFPS(void) const = 0;
		/*************************************************************************//*!
				@brief			制限フレーム時間取得
				@param			None

				@return			フレーム時間の制限値
		*//**************************************************************************/
		virtual MofU32 GetRestrictFrameTime(void) const = 0;
		/*************************************************************************//*!
				@brief			FPS取得
				@param			None

				@return			計測されたFPS
		*//**************************************************************************/
		virtual MofU32 GetFPS(void) const = 0;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位はミリ秒
				@param			None

				@return			フレーム時間(msec)
		*//**************************************************************************/
		virtual MofU32 GetUpdateFrameTime(void) const = 0;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位はミリ秒
				@param			None

				@return			フレーム時間(msec)
		*//**************************************************************************/
		virtual MofU32 GetFrameMSecond(void) const = 0;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位は秒
				@param			None

				@return			フレーム時間(sec)
		*//**************************************************************************/
		virtual MofFloat GetFrameSecond(void) const = 0;
		/*************************************************************************//*!
				@brief			現在時間をミリ秒で返す
				@param			None

				@return			ミリ秒での時間
		*//**************************************************************************/
		static MofU32 GetTimeMS(void);
	};
	
	//ポインタ置き換え
	typedef IFrameTimer*		LPFrameTimer;
}

#endif

//[EOF]