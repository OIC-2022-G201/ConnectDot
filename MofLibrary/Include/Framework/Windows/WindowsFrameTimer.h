/*************************************************************************//*!
					
					@file	WindowsFrameTimer.h
					@brief	Windowsでフレーム時間を計測、調整するためのクラス。<br>
							timeGetTimeにより時間の調整を行う。

															@author	CDW
															@date	2014.05.14
*//**************************************************************************/

//ONCE
#ifndef		__WINDOWSFRAMETIMER__H__

#define		__WINDOWSFRAMETIMER__H__

//INCLUDE
#include	"../FrameTimer.h"

namespace Mof {
	
	/*******************************//*!
	@brief	フレームタイマー基底インターフェイス

			フレーム時間を計測、調整するためのインターフェイス。

	@author	CDW
	*//********************************/
	class MOFLIBRARY_API CWindowsFrameTimer : public IFrameTimer {
	protected:
		/*******************//*!
		計測された前回の時間
		*//********************/
		MofU32						m_BeforeTime;
		/*******************//*!
		計測されたフレーム時間
		*//********************/
		MofU32						m_NowFrameTime;
		/*******************//*!
		計測されたフレーム時間
		*//********************/
		MofU32						m_UpdateFrameTime;
		/*******************//*!
		設定FPS
		*//********************/
		MofU32						m_FPS;
		/*******************//*!
		設定フレーム時間、1000 / m_FPSが自動で格納される。
		*//********************/
		MofU32						m_FrameTime;
		/*******************//*!
		計測FPS
		*//********************/
		MofU32						m_FPSCount;
		/*******************//*!
		計測されたFPS
		*//********************/
		MofU32						m_NowFPS;
		/*******************//*!
		前回のFPS計測時間
		*//********************/
		MofU32						m_FPSBeforeTime;
	public:
		/*************************************************************************//*!
				@brief			コンストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		CWindowsFrameTimer();
		/*************************************************************************//*!
				@brief			コピーコンストラクタ
				@param[in]		pObj		コピータイマー

				@return			None
		*//**************************************************************************/
		CWindowsFrameTimer(const CWindowsFrameTimer& pObj);
		/*************************************************************************//*!
				@brief			デストラクタ
				@param			None

				@return			None
		*//**************************************************************************/
		virtual ~CWindowsFrameTimer();

		/*************************************************************************//*!
				@brief			タイマーの更新<br>
								タイマーの更新を行う。<br>
								前回この関数が呼び出されてから、今回実行されるまでの時間を計測しフレーム時間に設定する。<br>
								bWaitがTRUEなら設定されているFPSまでの余剰時間分をsleepにより待機する。<br>
								FPSが設定されていない場合やbWaitがFALSEの場合は待機処理は行われない。
				@param[in]		bWait		FPSウェイトフラグ
			
				@return			None
		*//**************************************************************************/
		virtual void Update(MofBool bWait);
		
		//----------------------------------------------------------------------------
		////Set
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			FPSの設定<br>
								FPSの固定をする場合に設定を行う。<br>
								引数のFPSに0を設定すると固定なしの時間計測のみの処理になる。
				@param[in]		s			FPS
			
				@return			TRUE		正常に設定された<br>
								FALSE		設定の失敗
		*//**************************************************************************/
		virtual MofBool SetFPS(MofU32 s);
		/*************************************************************************//*!
				@brief			フレーム時間の設定<br>
								このタイマーで経過したフレーム時間を引数のミリ秒に差し替える。
				@param[in]		s			フレーム時間(msec)
			
				@return			TRUE		正常に設定された<br>
								FALSE		設定の失敗
		*//**************************************************************************/
		virtual MofBool SetFrameMSecond(MofU32 s);

		//----------------------------------------------------------------------------
		////Get
		//----------------------------------------------------------------------------
		/*************************************************************************//*!
				@brief			制限FPS取得
				@param			None

				@return			FPSの制限値
		*//**************************************************************************/
		virtual MofU32 GetRestrictFPS(void) const;
		/*************************************************************************//*!
				@brief			制限フレーム時間取得
				@param			None

				@return			フレーム時間の制限値
		*//**************************************************************************/
		virtual MofU32 GetRestrictFrameTime(void) const;
		/*************************************************************************//*!
				@brief			FPS取得
				@param			None

				@return			計測されたFPS
		*//**************************************************************************/
		virtual MofU32 GetFPS(void) const;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位はミリ秒
				@param			None

				@return			フレーム時間(msec)
		*//**************************************************************************/
		virtual MofU32 GetUpdateFrameTime(void) const;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位はミリ秒
				@param			None

				@return			フレーム時間(msec)
		*//**************************************************************************/
		virtual MofU32 GetFrameMSecond(void) const;
		/*************************************************************************//*!
				@brief			フレーム時間取得<br>
								取得するフレーム時間の単位は秒
				@param			None

				@return			フレーム時間(sec)
		*//**************************************************************************/
		virtual MofFloat GetFrameSecond(void) const;
		
		//クラス基本定義
		MOF_LIBRARYCLASS(CWindowsFrameTimer,MOF_WINDOWSFRAMETIMERCLASS_ID);
	};

	#include	"WindowsFrameTimer.inl"
}

#endif

//[EOF]